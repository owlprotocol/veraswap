import { Hex } from "viem";

export const _constructor = {
    type: "constructor",
    inputs: [
        { name: "_name", type: "string", internalType: "string" },
        { name: "_symbol", type: "string", internalType: "string" },
        { name: "_owner", type: "address", internalType: "address" },
        { name: "_mintFeeCentiBips", type: "uint256", internalType: "uint256" },
        {
            name: "_basket",
            type: "tuple[]",
            internalType: "struct BasketFixedUnits.BasketToken[]",
            components: [
                { name: "addr", type: "address", internalType: "address" },
                { name: "units", type: "uint256", internalType: "uint256" },
            ],
        },
    ],
    stateMutability: "nonpayable",
} as const;
export const allowance = {
    type: "function",
    name: "allowance",
    inputs: [
        { name: "owner", type: "address", internalType: "address" },
        { name: "spender", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const approve = {
    type: "function",
    name: "approve",
    inputs: [
        { name: "spender", type: "address", internalType: "address" },
        { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
} as const;
export const balanceOf = {
    type: "function",
    name: "balanceOf",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const basket = {
    type: "function",
    name: "basket",
    inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    outputs: [
        { name: "addr", type: "address", internalType: "address" },
        { name: "units", type: "uint256", internalType: "uint256" },
    ],
    stateMutability: "view",
} as const;
export const basketLength = {
    type: "function",
    name: "basketLength",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const burn = {
    type: "function",
    name: "burn",
    inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const decimals = {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [{ name: "", type: "uint8", internalType: "uint8" }],
    stateMutability: "view",
} as const;
export const mint = {
    type: "function",
    name: "mint",
    inputs: [
        { name: "amount", type: "uint256", internalType: "uint256" },
        { name: "receiver", type: "address", internalType: "address" },
        { name: "referrer", type: "address", internalType: "address" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const mintFeeCentiBips = {
    type: "function",
    name: "mintFeeCentiBips",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const name = {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
} as const;
export const owner = {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [{ name: "", type: "address", internalType: "address" }],
    stateMutability: "view",
} as const;
export const symbol = {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
} as const;
export const totalSupply = {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const transfer = {
    type: "function",
    name: "transfer",
    inputs: [
        { name: "to", type: "address", internalType: "address" },
        { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
} as const;
export const transferFrom = {
    type: "function",
    name: "transferFrom",
    inputs: [
        { name: "from", type: "address", internalType: "address" },
        { name: "to", type: "address", internalType: "address" },
        { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
} as const;
export const Approval = {
    type: "event",
    name: "Approval",
    inputs: [
        { name: "owner", type: "address", indexed: true, internalType: "address" },
        { name: "spender", type: "address", indexed: true, internalType: "address" },
        { name: "value", type: "uint256", indexed: false, internalType: "uint256" },
    ],
    anonymous: false,
} as const;
export const Transfer = {
    type: "event",
    name: "Transfer",
    inputs: [
        { name: "from", type: "address", indexed: true, internalType: "address" },
        { name: "to", type: "address", indexed: true, internalType: "address" },
        { name: "value", type: "uint256", indexed: false, internalType: "uint256" },
    ],
    anonymous: false,
} as const;
export const AmountTooLarge = {
    type: "error",
    name: "AmountTooLarge",
    inputs: [
        { name: "amount", type: "uint256", internalType: "uint256" },
        { name: "max", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const ERC20InsufficientAllowance = {
    type: "error",
    name: "ERC20InsufficientAllowance",
    inputs: [
        { name: "spender", type: "address", internalType: "address" },
        { name: "allowance", type: "uint256", internalType: "uint256" },
        { name: "needed", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const ERC20InsufficientBalance = {
    type: "error",
    name: "ERC20InsufficientBalance",
    inputs: [
        { name: "sender", type: "address", internalType: "address" },
        { name: "balance", type: "uint256", internalType: "uint256" },
        { name: "needed", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const ERC20InvalidApprover = {
    type: "error",
    name: "ERC20InvalidApprover",
    inputs: [{ name: "approver", type: "address", internalType: "address" }],
} as const;
export const ERC20InvalidReceiver = {
    type: "error",
    name: "ERC20InvalidReceiver",
    inputs: [{ name: "receiver", type: "address", internalType: "address" }],
} as const;
export const ERC20InvalidSender = {
    type: "error",
    name: "ERC20InvalidSender",
    inputs: [{ name: "sender", type: "address", internalType: "address" }],
} as const;
export const ERC20InvalidSpender = {
    type: "error",
    name: "ERC20InvalidSpender",
    inputs: [{ name: "spender", type: "address", internalType: "address" }],
} as const;
export const EmptyBasket = { type: "error", name: "EmptyBasket", inputs: [] } as const;
export const FailedCall = { type: "error", name: "FailedCall", inputs: [] } as const;
export const IncorrectETH = {
    type: "error",
    name: "IncorrectETH",
    inputs: [
        { name: "actual", type: "uint256", internalType: "uint256" },
        { name: "expected", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const InsufficientBalance = {
    type: "error",
    name: "InsufficientBalance",
    inputs: [
        { name: "balance", type: "uint256", internalType: "uint256" },
        { name: "needed", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const SafeERC20FailedOperation = {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [{ name: "token", type: "address", internalType: "address" }],
} as const;
export const UnsortedDuplicate = {
    type: "error",
    name: "UnsortedDuplicate",
    inputs: [{ name: "token", type: "address", internalType: "address" }],
} as const;
export const ZeroAmount = { type: "error", name: "ZeroAmount", inputs: [] } as const;
export const ZeroUnits = { type: "error", name: "ZeroUnits", inputs: [] } as const;
export const functions = [
    _constructor,
    allowance,
    approve,
    balanceOf,
    basket,
    basketLength,
    burn,
    decimals,
    mint,
    mintFeeCentiBips,
    name,
    owner,
    symbol,
    totalSupply,
    transfer,
    transferFrom,
] as const;
export const events = [Approval, Transfer] as const;
export const errors = [
    AmountTooLarge,
    ERC20InsufficientAllowance,
    ERC20InsufficientBalance,
    ERC20InvalidApprover,
    ERC20InvalidReceiver,
    ERC20InvalidSender,
    ERC20InvalidSpender,
    EmptyBasket,
    FailedCall,
    IncorrectETH,
    InsufficientBalance,
    SafeERC20FailedOperation,
    UnsortedDuplicate,
    ZeroAmount,
    ZeroUnits,
] as const;
export const abi = [...functions, ...events, ...errors] as const;

export const bytecode =
    "" as Hex;
export const deployedBytecode =
    "0x6080806040526004361015610012575f80fd5b5f3560e01c90816306fdde03146109be57508063095ea7b31461093c57806318160ddd1461091f57806323b872dd14610840578063313ce5671461082557806342966c681461062457806347f63e9c14610607578063596df8ec146105cd57806370a08231146105965780638c7e08751461054a5780638da5cb5b1461050657806395d89b4114610402578063a9059cbb146103d1578063da39b3e7146101155763dd62ed3e146100c1575f80fd5b34610111576040366003190112610111576100da610aa0565b6100e2610ab6565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b60603660031901126101115760043561012c610ab6565b604435906001600160a01b038216908183036101115783156103c2575f5b6005548110156102955761016661016082610acc565b50610b1e565b90602082015191670de0b6b3a764000061018181858a610c7b565b938809610287575b80516001600160a01b03166101c25750908034036101ac57506001905b0161014a565b63172af06760e01b5f523460045260245260445ffd5b6001600160a01b03831161026657516001600160a01b03166e22d473030f116ddee9f6b43ac78ba33b1561011157604051631b63c28b60e11b81523360048201523060248201526001600160a01b03909316604484015260648301525f82608481836e22d473030f116ddee9f6b43ac78ba35af191821561025b5760019261024b575b506101a6565b5f61025591610afc565b86610245565b6040513d5f823e3d90fd5b637f16270360e01b5f90815260048490526001600160a01b03602452604490fd5b916001019182610189575f80fd5b509092917f0000000000000000000000000000000000000000000000000000000000000000938415801561038c575b156102d75750506102d59250610cfb565b005b919092620f42406102e9818784610c7b565b95820961037e575b84810390811161036a5761030491610cfb565b61033357506102d5907f0000000000000000000000000000000000000000000000000000000000000000610cfb565b6103446102d59260011c8092610cfb565b7f0000000000000000000000000000000000000000000000000000000000000000610cfb565b634e487b7160e01b5f52601160045260245ffd5b9360010193846102f1575f80fd5b506001600160a01b038381167f0000000000000000000000000000000000000000000000000000000000000000909116146102c4565b631f2a200560e01b5f5260045ffd5b34610111576040366003190112610111576103f76103ed610aa0565b6024359033610b56565b602060405160018152f35b34610111575f366003190112610111576040515f6004548060011c906001811680156104fc575b6020831081146104e8578285529081156104c45750600114610466575b6104628361045681850382610afc565b60405191829182610a76565b0390f35b91905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b915f905b8082106104aa57509091508101602001610456610446565b919260018160209254838588010152019101909291610492565b60ff191660208086019190915291151560051b840190910191506104569050610446565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610429565b34610111575f366003190112610111576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610111576020366003190112610111576004356005548110156101115761057190610acc565b508054600190910154604080516001600160a01b039093168352602083019190915290f35b34610111576020366003190112610111576001600160a01b036105b7610aa0565b165f525f602052602060405f2054604051908152f35b34610111575f3660031901126101115760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b34610111575f366003190112610111576020600554604051908152f35b346101115760203660031901126101115760043580156103c257331561081257335f525f6020528060405f20548181106107f957335f525f6020520360405f205580600254036002555f6040518281527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a35f805b600554811015610752576106b361016082610acc565b6106c1602082015185610c00565b90516001600160a01b0316806106de575091506001905b0161069d565b60405163a9059cbb60e01b60208083019182523360248401526044808401959095529382529192915f91610713606482610afc565b519082855af11561025b575f513d6107495750803b155b61073757506001906106d8565b635274afe760e01b5f5260045260245ffd5b6001141561072a565b508061075a57005b8047106107e3575f80808093335af13d156107db573d9067ffffffffffffffff82116107c75760405191610798601f8201601f191660200184610afc565b82523d5f602084013e5b156107a957005b8051156107b857805190602001fd5b63d6bda27560e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b6060906107a2565b4763cf47918160e01b5f5260045260245260445ffd5b63391434e360e21b5f523360045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b34610111575f36600319011261011157602060405160128152f35b3461011157606036600319011261011157610859610aa0565b610861610ab6565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f19811061089f575b506103f79350610b56565b8381106109045784156108f15733156108de576103f7945f52600160205260405f2060018060a01b0333165f526020528360405f209103905584610894565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b34610111575f366003190112610111576020600254604051908152f35b3461011157604036600319011261011157610955610aa0565b6024359033156108f1576001600160a01b03169081156108de57335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b34610111575f366003190112610111575f6003548060011c90600181168015610a6c575b6020831081146104e8578285529081156104c45750600114610a0e576104628361045681850382610afc565b91905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b915f905b808210610a5257509091508101602001610456610446565b919260018160209254838588010152019101909291610a3a565b91607f16916109e2565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b038216820361011157565b602435906001600160a01b038216820361011157565b600554811015610ae85760055f5260205f209060011b01905f90565b634e487b7160e01b5f52603260045260245ffd5b90601f8019910116810190811067ffffffffffffffff8211176107c757604052565b906040516040810181811067ffffffffffffffff8211176107c75760405282546001600160a01b031681526001909201546020830152565b6001600160a01b0316908115610812576001600160a01b0316918215610bed57815f525f60205260405f2054818110610bd457817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd5b63ec442f0560e01b5f525f60045260245ffd5b808202905f1983820990828083109203918083039283670de0b6b3a764000011156101115714610c6a577faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac1066993670de0b6b3a7640000910990828211900360ee1b910360121c170290565b5050670de0b6b3a764000091500490565b91818302915f19818509938380861095039480860395868511156101115714610cf3579082910981805f03168092046002816003021880820260020302808202600203028082026002030280820260020302808202600203028091026002030293600183805f03040190848311900302920304170290565b505091500490565b6001600160a01b0316908115610bed576002549080820180921161036a5760207fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915f9360025584845283825260408420818154019055604051908152a356fea164736f6c634300081a000a" as Hex;
export const BasketFixedUnits = {
    abi,
    bytecode,
    deployedBytecode,
};
