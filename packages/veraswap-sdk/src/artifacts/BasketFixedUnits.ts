import { Hex } from "viem";

export const _constructor = {
    type: "constructor",
    inputs: [
        {
            name: "_basket",
            type: "tuple[]",
            internalType: "struct BasketFixedUnits.BasketToken[]",
            components: [
                { name: "addr", type: "address", internalType: "address" },
                { name: "units", type: "uint256", internalType: "uint256" },
            ],
        },
        { name: "_name", type: "string", internalType: "string" },
        { name: "_symbol", type: "string", internalType: "string" },
    ],
    stateMutability: "nonpayable",
} as const;
export const allowance = {
    type: "function",
    name: "allowance",
    inputs: [
        { name: "owner", type: "address", internalType: "address" },
        { name: "spender", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const approve = {
    type: "function",
    name: "approve",
    inputs: [
        { name: "spender", type: "address", internalType: "address" },
        { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
} as const;
export const balanceOf = {
    type: "function",
    name: "balanceOf",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const basket = {
    type: "function",
    name: "basket",
    inputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    outputs: [
        { name: "addr", type: "address", internalType: "address" },
        { name: "units", type: "uint256", internalType: "uint256" },
    ],
    stateMutability: "view",
} as const;
export const basketLength = {
    type: "function",
    name: "basketLength",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const burn = {
    type: "function",
    name: "burn",
    inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const decimals = {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [{ name: "", type: "uint8", internalType: "uint8" }],
    stateMutability: "view",
} as const;
export const mint = {
    type: "function",
    name: "mint",
    inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }],
    outputs: [],
    stateMutability: "payable",
} as const;
export const name = {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
} as const;
export const symbol = {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "view",
} as const;
export const totalSupply = {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const transfer = {
    type: "function",
    name: "transfer",
    inputs: [
        { name: "to", type: "address", internalType: "address" },
        { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
} as const;
export const transferFrom = {
    type: "function",
    name: "transferFrom",
    inputs: [
        { name: "from", type: "address", internalType: "address" },
        { name: "to", type: "address", internalType: "address" },
        { name: "value", type: "uint256", internalType: "uint256" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "nonpayable",
} as const;
export const Approval = {
    type: "event",
    name: "Approval",
    inputs: [
        { name: "owner", type: "address", indexed: true, internalType: "address" },
        { name: "spender", type: "address", indexed: true, internalType: "address" },
        { name: "value", type: "uint256", indexed: false, internalType: "uint256" },
    ],
    anonymous: false,
} as const;
export const Transfer = {
    type: "event",
    name: "Transfer",
    inputs: [
        { name: "from", type: "address", indexed: true, internalType: "address" },
        { name: "to", type: "address", indexed: true, internalType: "address" },
        { name: "value", type: "uint256", indexed: false, internalType: "uint256" },
    ],
    anonymous: false,
} as const;
export const AmountTooLarge = { type: "error", name: "AmountTooLarge", inputs: [] } as const;
export const ERC20InsufficientAllowance = {
    type: "error",
    name: "ERC20InsufficientAllowance",
    inputs: [
        { name: "spender", type: "address", internalType: "address" },
        { name: "allowance", type: "uint256", internalType: "uint256" },
        { name: "needed", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const ERC20InsufficientBalance = {
    type: "error",
    name: "ERC20InsufficientBalance",
    inputs: [
        { name: "sender", type: "address", internalType: "address" },
        { name: "balance", type: "uint256", internalType: "uint256" },
        { name: "needed", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const ERC20InvalidApprover = {
    type: "error",
    name: "ERC20InvalidApprover",
    inputs: [{ name: "approver", type: "address", internalType: "address" }],
} as const;
export const ERC20InvalidReceiver = {
    type: "error",
    name: "ERC20InvalidReceiver",
    inputs: [{ name: "receiver", type: "address", internalType: "address" }],
} as const;
export const ERC20InvalidSender = {
    type: "error",
    name: "ERC20InvalidSender",
    inputs: [{ name: "sender", type: "address", internalType: "address" }],
} as const;
export const ERC20InvalidSpender = {
    type: "error",
    name: "ERC20InvalidSpender",
    inputs: [{ name: "spender", type: "address", internalType: "address" }],
} as const;
export const EmptyBasket = { type: "error", name: "EmptyBasket", inputs: [] } as const;
export const FailedCall = { type: "error", name: "FailedCall", inputs: [] } as const;
export const IncorrectETH = {
    type: "error",
    name: "IncorrectETH",
    inputs: [
        { name: "actual", type: "uint256", internalType: "uint256" },
        { name: "expected", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const InsufficientBalance = {
    type: "error",
    name: "InsufficientBalance",
    inputs: [
        { name: "balance", type: "uint256", internalType: "uint256" },
        { name: "needed", type: "uint256", internalType: "uint256" },
    ],
} as const;
export const SafeERC20FailedOperation = {
    type: "error",
    name: "SafeERC20FailedOperation",
    inputs: [{ name: "token", type: "address", internalType: "address" }],
} as const;
export const UnsortedDuplicate = {
    type: "error",
    name: "UnsortedDuplicate",
    inputs: [{ name: "token", type: "address", internalType: "address" }],
} as const;
export const ZeroAmount = { type: "error", name: "ZeroAmount", inputs: [] } as const;
export const ZeroUnits = { type: "error", name: "ZeroUnits", inputs: [] } as const;
export const functions = [
    _constructor,
    allowance,
    approve,
    balanceOf,
    basket,
    basketLength,
    burn,
    decimals,
    mint,
    name,
    symbol,
    totalSupply,
    transfer,
    transferFrom,
] as const;
export const events = [Approval, Transfer] as const;
export const errors = [
    AmountTooLarge,
    ERC20InsufficientAllowance,
    ERC20InsufficientBalance,
    ERC20InvalidApprover,
    ERC20InvalidReceiver,
    ERC20InvalidSender,
    ERC20InvalidSpender,
    EmptyBasket,
    FailedCall,
    IncorrectETH,
    InsufficientBalance,
    SafeERC20FailedOperation,
    UnsortedDuplicate,
    ZeroAmount,
    ZeroUnits,
] as const;
export const abi = [...functions, ...events, ...errors] as const;

export const bytecode =
    "" as Hex;
export const deployedBytecode =
    "0x6080806040526004361015610012575f80fd5b5f3560e01c90816306fdde031461084a57508063095ea7b3146107c857806318160ddd146107ab57806323b872dd146106cc578063313ce567146106b157806342966c68146104b057806347f63e9c1461049357806370a082311461045c5780638c7e08751461041057806395d89b411461030c578063a0712d6814610130578063a9059cbb146100ff5763dd62ed3e146100ab575f80fd5b346100fb5760403660031901126100fb576100c461092c565b6100cc610942565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b5f80fd5b346100fb5760403660031901126100fb5761012561011b61092c565b60243590336109e2565b602060405160018152f35b60203660031901126100fb5760043580156102fd575f5b60055481101561027f5761016361015d82610958565b506109aa565b90602082015191670de0b6b3a764000061017d8486610a79565b938509610271575b80516001600160a01b03166101be5750908034036101a857506001905b01610147565b63172af06760e01b5f523460045260245260445ffd5b6001600160a01b03831161026257516001600160a01b03166e22d473030f116ddee9f6b43ac78ba33b156100fb57604051631b63c28b60e11b81523360048201523060248201526001600160a01b03909316604484015260648301525f82608481836e22d473030f116ddee9f6b43ac78ba35af191821561025757600192610247575b506101a2565b5f61025191610988565b83610241565b6040513d5f823e3d90fd5b630625040160e01b5f5260045ffd5b916001019182610185575f80fd5b5033156102ea576002548181018091116102d657600255335f525f60205260405f208181540190556040519081525f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3005b634e487b7160e01b5f52601160045260245ffd5b63ec442f0560e01b5f525f60045260245ffd5b631f2a200560e01b5f5260045ffd5b346100fb575f3660031901126100fb576040515f6004548060011c90600181168015610406575b6020831081146103f2578285529081156103ce5750600114610370575b61036c8361036081850382610988565b60405191829182610902565b0390f35b91905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b915f905b8082106103b457509091508101602001610360610350565b91926001816020925483858801015201910190929161039c565b60ff191660208086019190915291151560051b840190910191506103609050610350565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610333565b346100fb5760203660031901126100fb576004356005548110156100fb5761043790610958565b508054600190910154604080516001600160a01b039093168352602083019190915290f35b346100fb5760203660031901126100fb576001600160a01b0361047d61092c565b165f525f602052602060405f2054604051908152f35b346100fb575f3660031901126100fb576020600554604051908152f35b346100fb5760203660031901126100fb5760043580156102fd57331561069e57335f525f6020528060405f205481811061068557335f525f6020520360405f205580600254036002555f6040518281527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a35f805b6005548110156105de5761053f61015d82610958565b61054d602082015185610a79565b90516001600160a01b03168061056a575091506001905b01610529565b60405163a9059cbb60e01b60208083019182523360248401526044808401959095529382529192915f9161059f606482610988565b519082855af115610257575f513d6105d55750803b155b6105c35750600190610564565b635274afe760e01b5f5260045260245ffd5b600114156105b6565b50806105e657005b80471061066f575f80808093335af13d15610667573d9067ffffffffffffffff82116106535760405191610624601f8201601f191660200184610988565b82523d5f602084013e5b1561063557005b80511561064457805190602001fd5b63d6bda27560e01b5f5260045ffd5b634e487b7160e01b5f52604160045260245ffd5b60609061062e565b4763cf47918160e01b5f5260045260245260445ffd5b63391434e360e21b5f523360045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b346100fb575f3660031901126100fb57602060405160128152f35b346100fb5760603660031901126100fb576106e561092c565b6106ed610942565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f19811061072b575b5061012593506109e2565b83811061079057841561077d57331561076a57610125945f52600160205260405f2060018060a01b0333165f526020528360405f209103905584610720565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b346100fb575f3660031901126100fb576020600254604051908152f35b346100fb5760403660031901126100fb576107e161092c565b60243590331561077d576001600160a01b031690811561076a57335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b346100fb575f3660031901126100fb575f6003548060011c906001811680156108f8575b6020831081146103f2578285529081156103ce575060011461089a5761036c8361036081850382610988565b91905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b915f905b8082106108de57509091508101602001610360610350565b9192600181602092548385880101520191019092916108c6565b91607f169161086e565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b03821682036100fb57565b602435906001600160a01b03821682036100fb57565b6005548110156109745760055f5260205f209060011b01905f90565b634e487b7160e01b5f52603260045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761065357604052565b906040516040810181811067ffffffffffffffff8211176106535760405282546001600160a01b031681526001909201546020830152565b6001600160a01b031690811561069e576001600160a01b03169182156102ea57815f525f60205260405f2054818110610a6057817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd5b808202905f1983820990828083109203918083039283670de0b6b3a764000011156100fb5714610ae3577faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac1066993670de0b6b3a7640000910990828211900360ee1b910360121c170290565b5050670de0b6b3a76400009150049056fea164736f6c634300081a000a" as Hex;
export const BasketFixedUnits = {
    abi,
    bytecode,
    deployedBytecode,
};
