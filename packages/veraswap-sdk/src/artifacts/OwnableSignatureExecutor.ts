import { Hex } from "viem";

export const addOwner = {
    type: "function",
    name: "addOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const executeBatchOnOwnedAccount = {
    type: "function",
    name: "executeBatchOnOwnedAccount",
    inputs: [
        { name: "ownedAccount", type: "address", internalType: "address" },
        { name: "nonce", type: "uint256", internalType: "uint256" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "callData", type: "bytes", internalType: "bytes" },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const executeBatchOnOwnedAccount_address_bytes = {
    type: "function",
    name: "executeBatchOnOwnedAccount",
    inputs: [
        { name: "ownedAccount", type: "address", internalType: "address" },
        { name: "callData", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const executeOnOwnedAccount = {
    type: "function",
    name: "executeOnOwnedAccount",
    inputs: [
        { name: "ownedAccount", type: "address", internalType: "address" },
        { name: "nonce", type: "uint256", internalType: "uint256" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "callData", type: "bytes", internalType: "bytes" },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const executeOnOwnedAccount_address_bytes = {
    type: "function",
    name: "executeOnOwnedAccount",
    inputs: [
        { name: "ownedAccount", type: "address", internalType: "address" },
        { name: "callData", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const getNonce = {
    type: "function",
    name: "getNonce",
    inputs: [
        { name: "sender", type: "address", internalType: "address" },
        { name: "key", type: "uint192", internalType: "uint192" },
    ],
    outputs: [{ name: "nonce", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const getOwners = {
    type: "function",
    name: "getOwners",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
    outputs: [{ name: "ownersArray", type: "address[]", internalType: "address[]" }],
    stateMutability: "view",
} as const;
export const incrementNonce = {
    type: "function",
    name: "incrementNonce",
    inputs: [{ name: "key", type: "uint192", internalType: "uint192" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const isInitialized = {
    type: "function",
    name: "isInitialized",
    inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
} as const;
export const isModuleType = {
    type: "function",
    name: "isModuleType",
    inputs: [{ name: "typeID", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "pure",
} as const;
export const name = {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
} as const;
export const nonceSequenceNumber = {
    type: "function",
    name: "nonceSequenceNumber",
    inputs: [
        { name: "", type: "address", internalType: "address" },
        { name: "", type: "uint192", internalType: "uint192" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const onInstall = {
    type: "function",
    name: "onInstall",
    inputs: [{ name: "data", type: "bytes", internalType: "bytes" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const onUninstall = {
    type: "function",
    name: "onUninstall",
    inputs: [{ name: "", type: "bytes", internalType: "bytes" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const ownerCount = {
    type: "function",
    name: "ownerCount",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const removeOwner = {
    type: "function",
    name: "removeOwner",
    inputs: [
        { name: "prevOwner", type: "address", internalType: "address" },
        { name: "owner", type: "address", internalType: "address" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const version = {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
} as const;
export const ModuleInitialized = {
    type: "event",
    name: "ModuleInitialized",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
} as const;
export const ModuleUninitialized = {
    type: "event",
    name: "ModuleUninitialized",
    inputs: [{ name: "account", type: "address", indexed: true, internalType: "address" }],
    anonymous: false,
} as const;
export const OwnerAdded = {
    type: "event",
    name: "OwnerAdded",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
} as const;
export const OwnerRemoved = {
    type: "event",
    name: "OwnerRemoved",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
} as const;
export const AlreadyInitialized = {
    type: "error",
    name: "AlreadyInitialized",
    inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
} as const;
export const InvalidNonce = {
    type: "error",
    name: "InvalidNonce",
    inputs: [{ name: "nonce", type: "uint256", internalType: "uint256" }],
} as const;
export const InvalidOwner = {
    type: "error",
    name: "InvalidOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
} as const;
export const InvalidTimestamp = {
    type: "error",
    name: "InvalidTimestamp",
    inputs: [
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
    ],
} as const;
export const LinkedList_AlreadyInitialized = {
    type: "error",
    name: "LinkedList_AlreadyInitialized",
    inputs: [],
} as const;
export const LinkedList_EntryAlreadyInList = {
    type: "error",
    name: "LinkedList_EntryAlreadyInList",
    inputs: [{ name: "entry", type: "address", internalType: "address" }],
} as const;
export const LinkedList_InvalidEntry = {
    type: "error",
    name: "LinkedList_InvalidEntry",
    inputs: [{ name: "entry", type: "address", internalType: "address" }],
} as const;
export const LinkedList_InvalidPage = { type: "error", name: "LinkedList_InvalidPage", inputs: [] } as const;
export const NotInitialized = {
    type: "error",
    name: "NotInitialized",
    inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
} as const;
export const UnauthorizedAccess = { type: "error", name: "UnauthorizedAccess", inputs: [] } as const;
export const functions = [
    addOwner,
    executeBatchOnOwnedAccount,
    executeBatchOnOwnedAccount_address_bytes,
    executeOnOwnedAccount,
    executeOnOwnedAccount_address_bytes,
    getNonce,
    getOwners,
    incrementNonce,
    isInitialized,
    isModuleType,
    name,
    nonceSequenceNumber,
    onInstall,
    onUninstall,
    ownerCount,
    removeOwner,
    version,
] as const;
export const events = [ModuleInitialized, ModuleUninitialized, OwnerAdded, OwnerRemoved] as const;
export const errors = [
    AlreadyInitialized,
    InvalidNonce,
    InvalidOwner,
    InvalidTimestamp,
    LinkedList_AlreadyInitialized,
    LinkedList_EntryAlreadyInList,
    LinkedList_InvalidEntry,
    LinkedList_InvalidPage,
    NotInitialized,
    UnauthorizedAccess,
] as const;
export const abi = [...functions, ...events, ...errors] as const;

export const bytecode =
    "" as Hex;
export const deployedBytecode =
    "" as Hex;
export const OwnableSignatureExecutor = {
    abi,
    bytecode,
    deployedBytecode,
};
