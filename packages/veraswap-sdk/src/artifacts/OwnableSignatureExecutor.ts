import { Hex } from "viem";

export const DOMAIN_SEPARATOR = {
    type: "function",
    name: "DOMAIN_SEPARATOR",
    inputs: [],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "view",
} as const;
export const addOwner = {
    type: "function",
    name: "addOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const executeBatchOnOwnedAccount = {
    type: "function",
    name: "executeBatchOnOwnedAccount",
    inputs: [
        { name: "ownedAccount", type: "address", internalType: "address" },
        { name: "callData", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const executeBatchOnOwnedAccountWithSignature = {
    type: "function",
    name: "executeBatchOnOwnedAccountWithSignature",
    inputs: [
        {
            name: "signatureExecution",
            type: "tuple",
            internalType: "struct SignatureExecutionLib.SignatureExecution",
            components: [
                { name: "account", type: "address", internalType: "address" },
                { name: "nonce", type: "uint256", internalType: "uint256" },
                { name: "validAfter", type: "uint48", internalType: "uint48" },
                { name: "validUntil", type: "uint48", internalType: "uint48" },
                { name: "value", type: "uint256", internalType: "uint256" },
                { name: "callData", type: "bytes", internalType: "bytes" },
            ],
        },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const executeOnOwnedAccount = {
    type: "function",
    name: "executeOnOwnedAccount",
    inputs: [
        { name: "ownedAccount", type: "address", internalType: "address" },
        { name: "callData", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const executeOnOwnedAccountWithSignature = {
    type: "function",
    name: "executeOnOwnedAccountWithSignature",
    inputs: [
        {
            name: "signatureExecution",
            type: "tuple",
            internalType: "struct SignatureExecutionLib.SignatureExecution",
            components: [
                { name: "account", type: "address", internalType: "address" },
                { name: "nonce", type: "uint256", internalType: "uint256" },
                { name: "validAfter", type: "uint48", internalType: "uint48" },
                { name: "validUntil", type: "uint48", internalType: "uint48" },
                { name: "value", type: "uint256", internalType: "uint256" },
                { name: "callData", type: "bytes", internalType: "bytes" },
            ],
        },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const getNonce = {
    type: "function",
    name: "getNonce",
    inputs: [
        { name: "sender", type: "address", internalType: "address" },
        { name: "key", type: "uint192", internalType: "uint192" },
    ],
    outputs: [{ name: "nonce", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const getOwners = {
    type: "function",
    name: "getOwners",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
    outputs: [{ name: "ownersArray", type: "address[]", internalType: "address[]" }],
    stateMutability: "view",
} as const;
export const incrementNonce = {
    type: "function",
    name: "incrementNonce",
    inputs: [{ name: "key", type: "uint192", internalType: "uint192" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const isInitialized = {
    type: "function",
    name: "isInitialized",
    inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
} as const;
export const isModuleType = {
    type: "function",
    name: "isModuleType",
    inputs: [{ name: "typeID", type: "uint256", internalType: "uint256" }],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "pure",
} as const;
export const name = {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
} as const;
export const nonceSequenceNumber = {
    type: "function",
    name: "nonceSequenceNumber",
    inputs: [
        { name: "", type: "address", internalType: "address" },
        { name: "", type: "uint192", internalType: "uint192" },
    ],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const onInstall = {
    type: "function",
    name: "onInstall",
    inputs: [{ name: "data", type: "bytes", internalType: "bytes" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const onUninstall = {
    type: "function",
    name: "onUninstall",
    inputs: [{ name: "", type: "bytes", internalType: "bytes" }],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const ownerCount = {
    type: "function",
    name: "ownerCount",
    inputs: [{ name: "", type: "address", internalType: "address" }],
    outputs: [{ name: "", type: "uint256", internalType: "uint256" }],
    stateMutability: "view",
} as const;
export const removeOwner = {
    type: "function",
    name: "removeOwner",
    inputs: [
        { name: "prevOwner", type: "address", internalType: "address" },
        { name: "owner", type: "address", internalType: "address" },
    ],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const version = {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [{ name: "", type: "string", internalType: "string" }],
    stateMutability: "pure",
} as const;
export const ModuleInitialized = {
    type: "event",
    name: "ModuleInitialized",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
} as const;
export const ModuleUninitialized = {
    type: "event",
    name: "ModuleUninitialized",
    inputs: [{ name: "account", type: "address", indexed: true, internalType: "address" }],
    anonymous: false,
} as const;
export const OwnerAdded = {
    type: "event",
    name: "OwnerAdded",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
} as const;
export const OwnerRemoved = {
    type: "event",
    name: "OwnerRemoved",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
    ],
    anonymous: false,
} as const;
export const AlreadyInitialized = {
    type: "error",
    name: "AlreadyInitialized",
    inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
} as const;
export const InvalidNonce = {
    type: "error",
    name: "InvalidNonce",
    inputs: [{ name: "nonce", type: "uint256", internalType: "uint256" }],
} as const;
export const InvalidOwner = {
    type: "error",
    name: "InvalidOwner",
    inputs: [{ name: "owner", type: "address", internalType: "address" }],
} as const;
export const InvalidTimestamp = {
    type: "error",
    name: "InvalidTimestamp",
    inputs: [
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
    ],
} as const;
export const LinkedList_AlreadyInitialized = {
    type: "error",
    name: "LinkedList_AlreadyInitialized",
    inputs: [],
} as const;
export const LinkedList_EntryAlreadyInList = {
    type: "error",
    name: "LinkedList_EntryAlreadyInList",
    inputs: [{ name: "entry", type: "address", internalType: "address" }],
} as const;
export const LinkedList_InvalidEntry = {
    type: "error",
    name: "LinkedList_InvalidEntry",
    inputs: [{ name: "entry", type: "address", internalType: "address" }],
} as const;
export const LinkedList_InvalidPage = { type: "error", name: "LinkedList_InvalidPage", inputs: [] } as const;
export const NotInitialized = {
    type: "error",
    name: "NotInitialized",
    inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
} as const;
export const UnauthorizedAccess = { type: "error", name: "UnauthorizedAccess", inputs: [] } as const;
export const functions = [
    DOMAIN_SEPARATOR,
    addOwner,
    executeBatchOnOwnedAccount,
    executeBatchOnOwnedAccountWithSignature,
    executeOnOwnedAccount,
    executeOnOwnedAccountWithSignature,
    getNonce,
    getOwners,
    incrementNonce,
    isInitialized,
    isModuleType,
    name,
    nonceSequenceNumber,
    onInstall,
    onUninstall,
    ownerCount,
    removeOwner,
    version,
] as const;
export const events = [ModuleInitialized, ModuleUninitialized, OwnerAdded, OwnerRemoved] as const;
export const errors = [
    AlreadyInitialized,
    InvalidNonce,
    InvalidOwner,
    InvalidTimestamp,
    LinkedList_AlreadyInitialized,
    LinkedList_EntryAlreadyInList,
    LinkedList_InvalidEntry,
    LinkedList_InvalidPage,
    NotInitialized,
    UnauthorizedAccess,
] as const;
export const abi = [...functions, ...events, ...errors] as const;

export const bytecode =
    "" as Hex;
export const deployedBytecode =
    "0x60806040526004361015610011575f80fd5b5f3560e01c806306fdde0314610b2e5780630bd28e3b14610ade5780631ae234a814610a795780631b2e01b814610a2757806335567e1a146109c35780633644e515146109a15780634bb60b7e1461088a57806354fd4d50146108475780636d61fe701461074c5780637065cb481461067b5780638a91b0e3146105b6578063ccfdec8c1461057e578063d26cdce314610519578063d60b347f146104cc578063e5086003146103de578063ecd05961146103be578063fbe5ce0a146102965763fd8b84b1146100df575f80fd5b34610292576020366003190112610292576001600160a01b03610100610c40565b16805f525f60205260405f20905f52600160205260405f205480156102835761012881610e1f565b916101366040519384610c95565b81835261014282610e1f565b602084019290601f190136843760015f908152602083905260408120549093906001600160a01b03165b6001600160a01b0381169081151580610278575b8061026f575b156101bf57508061019786886112db565b525f908152602084905260409020546001600160a01b0316936101b990610ce5565b9361016c565b8690839087906001600160a01b03166001141580610266575b61022c575b82919252604051918291602083019060208452518091526040830191905f5b81811061020a575050500390f35b82516001600160a01b03168452859450602093840193909201916001016101fc565b5f198101818111610252576001600160a01b039061024a90856112db565b5150506101dd565b634e487b7160e01b5f52601160045260245ffd5b508015156101d8565b50838610610186565b506001821415610180565b63f725081760e01b5f5260045ffd5b5f80fd5b34610292576040366003190112610292576102af610c40565b6024356001600160a01b038116919082900361029257335f525f60205260405f2090821580156103b4575b610394576001600160a01b038181165f9081526020849052604090205416839003610381575f8381526020928352604080822080546001600160a01b0394851684528284208054959091166001600160a01b031995861617905580549093169092553381526001909252902080548015610252575f190190556040519081527fe594d081b4382713733fe631966432c9cea5199afb2db5c3c1931f9f9300367960203392a2005b82637c84ecfb60e01b5f5260045260245ffd5b637c84ecfb60e01b5f9081526001600160a01b0391909116600452602490fd5b50600183146102da565b346102925760203660031901126102925760206040516002600435148152f35b6103e736610c56565b9160018060a01b031691825f525f60205261040660405f2033906111f6565b156104bd57610472925f926040516020810190600160f81b825285602182015285602282015285602682015285602a82015260208152610447604082610c95565b51905190602081106104ac575b506040516335a4725960e21b81529586948593849360048501610f0a565b039134905af180156104a15761048457005b61049f903d805f833e6104978183610c95565b810190610e36565b005b6040513d5f823e3d90fd5b85199060200360031b1b1686610454565b631a27eac360e11b5f5260045ffd5b34610292576020366003190112610292576001600160a01b036104ed610c40565b165f525f60205260405f2060015f52602052602060405f2060018060a01b039054161515604051908152f35b61052236610c56565b9160018060a01b031691825f525f60205261054160405f2033906111f6565b156104bd57610472925f92604051602081019085825285602182015285602282015285602682015285602a82015260208152610447604082610c95565b34610292576020366003190112610292576001600160a01b0361059f610c40565b165f526001602052602060405f2054604051908152f35b34610292576020366003190112610292576004356001600160401b038111610292576105e6903690600401610bc1565b5050335f525f60205260405f2060015f528060205260405f2060018060a01b039054165b6001600160a01b03811661064d57335f5260016020525f6040812055337f9d00629762554452d03c3b45626436df6ca1c3795d05d04df882f6db481b1be05f80a2005b6001600160a01b039081165f90815260208390526040902080546001600160a01b031981169091551661060a565b3461029257602036600319011261029257610694610c40565b335f90815260208181526040808320600184529091529020546001600160a01b031615610739576001600160a01b038116908115610726576106e090335f525f60205260405f20611232565b335f52600160205260405f206106f68154610ce5565b90556040519081527fc82bdbbf677a2462f2a7e22e4ba9abd209496b69cd7b868b3b1d28f76e09a40a60203392a2005b5063b20f76e360e01b5f5260045260245ffd5b63f91bd6f160e01b5f523360045260245ffd5b34610292576020366003190112610292576004356001600160401b0381116102925761077c903690600401610bc1565b601411610292573560601c801561083557335f525f60205260405f2060015f528060205260405f2060018060a01b039054166108265760015f5260205260405f2060016bffffffffffffffffffffffff60a01b825416179055335f525f6020526107e98160405f20611232565b335f526001602052600160405f20556040519081527f1cd4a6da6e6a6f4dc754cedd54ead3b9cd0e2f5804cda2ba60506c2899fb29df60203392a2005b6329e42f3360e11b5f5260045ffd5b63b20f76e360e01b5f5260045260245ffd5b34610292575f36600319011261029257610886604051610868604082610c95565b60058152640312e302e360dc1b602082015260405191829182610b81565b0390f35b6108ce6108ef61089936610bee565b906108af6108aa9593953687610d06565b610ff4565b6108c96108c46108bf3688610d06565b6110a8565b611140565b611173565b6001600160a01b036108df84610dd9565b165f525f60205260405f206111f6565b156104bd5761097d905f906080906001600160a01b0361090e82610dd9565b16604051602081019085825285602182015285602282015285602682015285602a82015260208152610941604082610c95565b5190519060208110610990575b509061095d60a0840184610ded565b6040516335a4725960e21b81529788968795909386939160048501610f0a565b03930135905af180156104a15761048457005b85199060200360031b1b168661094e565b34610292575f3660031901126102925760206109bb610f37565b604051908152f35b346102925760403660031901126102925760206109de610c40565b6109e6610bab565b6001600160a01b039091165f9081526002835260408082206001600160c01b03841683528452908190205481519290911b67ffffffffffffffff1916178152f35b3461029257604036600319011261029257610a40610c40565b610a48610bab565b9060018060a01b03165f52600260205260405f209060018060c01b03165f52602052602060405f2054604051908152f35b6108ce610a8861089936610bee565b156104bd5761097d905f906080906001600160a01b03610aa782610dd9565b166040516020810190600160f81b825285602182015285602282015285602682015285602a82015260208152610941604082610c95565b34610292576020366003190112610292576004356001600160c01b038116810361029257335f52600260205260405f209060018060c01b03165f5260205260405f20610b2a8154610ce5565b9055005b34610292575f36600319011261029257610886604051610b4f604082610c95565b601881527f4f776e61626c655369676e61747572654578656375746f7200000000000000006020820152604051918291825b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b602435906001600160c01b038216820361029257565b9181601f84011215610292578235916001600160401b038311610292576020838186019501011161029257565b906040600319830112610292576004356001600160401b0381116102925760c081840360031901126102925760040191602435906001600160401b03821161029257610c3c91600401610bc1565b9091565b600435906001600160a01b038216820361029257565b906040600319830112610292576004356001600160a01b03811681036102925791602435906001600160401b03821161029257610c3c91600401610bc1565b90601f801991011681019081106001600160401b03821117610cb657604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b038111610cb657601f01601f191660200190565b5f1981146102525760010190565b359065ffffffffffff8216820361029257565b919060c0838203126102925760405160c081018181106001600160401b03821117610cb65760405292839080356001600160a01b038116810361029257825260208101356020830152610d5b60408201610cf3565b6040830152610d6c60608201610cf3565b60608301526080810135608083015260a0810135906001600160401b03821161029257019082601f83011215610292578135610da781610cca565b93610db56040519586610c95565b81855260208285010111610292576020815f928260a0960183880137850101520152565b356001600160a01b03811681036102925790565b903590601e198136030182121561029257018035906001600160401b0382116102925760200191813603831361029257565b6001600160401b038111610cb65760051b60200190565b602081830312610292578051906001600160401b03821161029257019080601f8301121561029257815191610e6a83610e1f565b92610e786040519485610c95565b80845260208085019160051b830101918383116102925760208101915b838310610ea457505050505090565b82516001600160401b03811161029257820185603f8201121561029257602081015191610ed083610cca565b610edd6040519182610c95565b8381526040838501018810610292575f602085819660408397018386015e83010152815201920191610e95565b91926060938192845260406020850152816040850152848401375f828201840152601f01601f1916010190565b467f000000000000000000000000000000000000000000000000000000000000000003610f82577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86682527f032c0ca63bd64bd2f57670f3eb8fd21f5e14f82e42c246f18cd1153d53eed9fd604082015246606082015230608082015260808152610fee60a082610c95565b51902090565b65ffffffffffff6060820151168042118015611093575b61107057508051602091820180516001600160a01b039092165f90815260028452604080822084821c8352909452929092208054916001600160401b039161105284610ce5565b9055160361105d5750565b51632c4dce9b60e21b5f5260045260245ffd5b65ffffffffffff60408301511690631156860560e11b5f5260045260245260445ffd5b5065ffffffffffff604083015116421061100b565b60018060a01b038151169060208101519065ffffffffffff6040820151169065ffffffffffff60608201511660a0608083015192015160208151910120926040519460208601967f35b50871f12cecf9c8bc5dcc138ee71b266a58993bfacbb50bfbb111ef4c272a885260408701526060860152608085015260a084015260c083015260e082015260e08152610fee61010082610c95565b611148610f37565b9060405190602082019261190160f01b84526022830152604282015260428152610fee606282610c95565b9092919260405193806040146111ce5760411461119c57505050505b638baa579f5f526004601cfd5b806040809201355f1a60205281375b5f526020600160805f825afa51915f6060526040523d6111cc57505061118f565b565b5060208181013560ff81901c601b0190915290356040526001600160ff1b03166060526111ab565b6001600160a01b03821660011415918261120f57505090565b6001600160a01b039081165f908152602092909252604090912054161515919050565b6001600160a01b0390911690811580156112d1575b6112be575f828152602082905260409020546001600160a01b03166112ab5760015f8181526020929092526040808320805485855291842080546001600160a01b039093166001600160a01b03199384161790559190925280549091169091179055565b50631034f46960e21b5f5260045260245ffd5b50637c84ecfb60e01b5f5260045260245ffd5b5060018214611247565b80518210156112ef5760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfea164736f6c634300081a000a" as Hex;
export const OwnableSignatureExecutor = {
    abi,
    bytecode,
    deployedBytecode,
};
