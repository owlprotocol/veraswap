import { Hex } from "viem";

export const _constructor = {
    type: "constructor",
    inputs: [
        { name: "_executor", type: "address", internalType: "address" },
        { name: "_factory", type: "address", internalType: "address" },
    ],
    stateMutability: "nonpayable",
} as const;
export const callRemote = {
    type: "function",
    name: "callRemote",
    inputs: [
        { name: "destination", type: "uint256", internalType: "uint256" },
        { name: "account", type: "address", internalType: "address" },
        { name: "initData", type: "bytes", internalType: "bytes" },
        { name: "initSalt", type: "bytes32", internalType: "bytes32" },
        { name: "executionMode", type: "uint8", internalType: "enum ERC7579ExecutorMessage.ExecutionMode" },
        { name: "callData", type: "bytes", internalType: "bytes" },
        { name: "nonce", type: "uint256", internalType: "uint256" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "payable",
} as const;
export const handle = {
    type: "function",
    name: "handle",
    inputs: [
        { name: "owner", type: "address", internalType: "address" },
        { name: "account", type: "address", internalType: "address" },
        { name: "initData", type: "bytes", internalType: "bytes" },
        { name: "initSalt", type: "bytes32", internalType: "bytes32" },
        { name: "executionMode", type: "uint8", internalType: "enum ERC7579ExecutorMessage.ExecutionMode" },
        { name: "callData", type: "bytes", internalType: "bytes" },
        { name: "nonce", type: "uint256", internalType: "uint256" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const owners = {
    type: "function",
    name: "owners",
    inputs: [
        { name: "account", type: "address", internalType: "address" },
        { name: "origin", type: "uint256", internalType: "uint256" },
        { name: "owner", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
} as const;
export const setAccountOwners = {
    type: "function",
    name: "setAccountOwners",
    inputs: [
        {
            name: "_owners",
            type: "tuple[]",
            internalType: "struct SuperchainERC7579ExecutorRouter.RemoteRouterOwner[]",
            components: [
                { name: "domain", type: "uint256", internalType: "uint256" },
                { name: "owner", type: "address", internalType: "address" },
                { name: "enabled", type: "bool", internalType: "bool" },
            ],
        },
    ],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const AccountCreated = {
    type: "event",
    name: "AccountCreated",
    inputs: [{ name: "account", type: "address", indexed: true, internalType: "address" }],
    anonymous: false,
} as const;
export const AccountRemoteRouterOwnerSet = {
    type: "event",
    name: "AccountRemoteRouterOwnerSet",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "domain", type: "uint256", indexed: true, internalType: "uint256" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
        { name: "enabled", type: "bool", indexed: false, internalType: "bool" },
    ],
    anonymous: false,
} as const;
export const RemoteCallDispatched = {
    type: "event",
    name: "RemoteCallDispatched",
    inputs: [
        { name: "destination", type: "uint256", indexed: true, internalType: "uint256" },
        { name: "account", type: "address", indexed: true, internalType: "address" },
        {
            name: "executionMode",
            type: "uint8",
            indexed: false,
            internalType: "enum ERC7579ExecutorMessage.ExecutionMode",
        },
        { name: "messageId", type: "bytes32", indexed: false, internalType: "bytes32" },
    ],
    anonymous: false,
} as const;
export const RemoteCallProcessed = {
    type: "event",
    name: "RemoteCallProcessed",
    inputs: [
        { name: "origin", type: "uint256", indexed: true, internalType: "uint256" },
        { name: "account", type: "address", indexed: true, internalType: "address" },
        {
            name: "executionMode",
            type: "uint8",
            indexed: false,
            internalType: "enum ERC7579ExecutorMessage.ExecutionMode",
        },
    ],
    anonymous: false,
} as const;
export const AccountDeploymentFailed = {
    type: "error",
    name: "AccountDeploymentFailed",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
} as const;
export const InvalidCrossDomainSender = { type: "error", name: "InvalidCrossDomainSender", inputs: [] } as const;
export const InvalidExecutorMode = { type: "error", name: "InvalidExecutorMode", inputs: [] } as const;
export const InvalidRemoteRouterOwner = {
    type: "error",
    name: "InvalidRemoteRouterOwner",
    inputs: [
        { name: "account", type: "address", internalType: "address" },
        { name: "domain", type: "uint256", internalType: "uint256" },
        { name: "owner", type: "address", internalType: "address" },
    ],
} as const;
export const InvalidTimestamp = {
    type: "error",
    name: "InvalidTimestamp",
    inputs: [
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
    ],
} as const;
export const functions = [_constructor, callRemote, handle, owners, setAccountOwners] as const;
export const events = [AccountCreated, AccountRemoteRouterOwnerSet, RemoteCallDispatched, RemoteCallProcessed] as const;
export const errors = [
    AccountDeploymentFailed,
    InvalidCrossDomainSender,
    InvalidExecutorMode,
    InvalidRemoteRouterOwner,
    InvalidTimestamp,
] as const;
export const abi = [...functions, ...events, ...errors] as const;

export const bytecode =
    "0x60c034609357601f610e5138819003918201601f19168301916001600160401b038311848410176097578084926040948552833981010312609357604b602060458360ab565b920160ab565b6001600160a01b039182166080521660a052604051610d9290816100bf823960805181818161043801528181610528015281816106140152610675015260a051816107b70152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b038216820360935756fe60806040526004361015610011575f80fd5b5f803560e01c8063289860be14610910578063804063f5146102b4578063ea424b2c146102455763f2662cf714610046575f80fd5b346102425760203660031901126102425760043567ffffffffffffffff811161023e573660238201121561023e57806004013567ffffffffffffffff811161022a576040519161009c60208360051b0184610ba6565b818352602460606020850193028201019036821161022657602401915b8183106101a357505050815b815181101561019f578060406100dd60019385610d3d565b510151151533855284602052604085206100f78386610d3d565b5151865260205260408520838060a01b0360206101148588610d3d565b51015116848060a01b03165f5260205260405f209060ff8019835416911617905561013f8184610d3d565b5151828060a01b0360206101538487610d3d565b5101511660406101638487610d3d565b510151151560405191825260208201527f8e9e959238a120fa682f8f13c6406514da31a593c2ae3bac8130ab3f9d4dcaca60403392a3016100c5565b8280f35b60608336031261022657604051906060820182811067ffffffffffffffff821117610212576040528335825260208401356001600160a01b038116810361020e576020830152604084013590811515820361020e5782602092604060609501528152019201916100b9565b8680fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b634e487b7160e01b83526041600452602483fd5b5080fd5b80fd5b50346102425760603660031901126102425761025f610b60565b60443591906001600160a01b038316830361023e579060409160018060a01b03168152806020528181206024358252602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b5061014036600319011261070f576102ca610b60565b6102d2610b4a565b9060443567ffffffffffffffff811161070f576102f3903690600401610bc8565b9160843592600584101561070f5760a43567ffffffffffffffff811161070f57610321903690600401610bc8565b60c43561032c610c1e565b91610335610c33565b6101243567ffffffffffffffff811161070f57610356903690600401610bc8565b936022602160991b011933016108d45760408051633c9b65f760e11b81529890896004816023602160991b015afa988915610704575f905f9a610893575b50306001600160a01b039091160361088457868b9751610774575b5060048a036103e8575b868a8a5f80516020610d6683398151915260208c6103da6040518096610c6d565b6001600160a01b031693a380f35b60028a036104d857509065ffffffffffff80926040519561040887610b76565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104c9576040516325db05bf60e11b81529284928492839182916104839160048401610cc7565b039134905af180156104cd576104b4575b505060205f80516020610d66833981519152915b9185915f8080806103b9565b816104be91610ba6565b6104c957835f610494565b8380fd5b6040513d84823e3d90fd5b60038a036105b157509065ffffffffffff8092604051956104f887610b76565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104c95760405163035c469560e31b81529284928492839182916105739160048401610cc7565b039134905af180156104cd5761059c575b505060205f80516020610d66833981519152916104a8565b816105a691610ba6565b6104c957835f610584565b9450925065ffffffffffff919450168042118015610763575b6107445750506001600160a01b038381165f8181526020818152604080832089845282528083209486168352939052919091205460ff1615610722575050849084155f14610669577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561066557610573918391604051808095819463d26cdce360e01b83528960048401610ca2565b8280fd5b905060018403610713577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561070f576106c6915f91604051808095819463e508600360e01b83528860048401610ca2565b039134905af18015610704576106ee575b5060205f80516020610d66833981519152916104a8565b6106fb9194505f90610ba6565b5f9260206106d7565b6040513d5f823e3d90fd5b5f80fd5b63f483256360e01b5f5260045ffd5b849063a4d9a4d960e01b5f5260045260245260018060a01b031660445260645ffd5b65ffffffffffff9250631156860560e11b5f526004521660245260445ffd5b5065ffffffffffff821642106105ca565b883b6103af576107aa919293949596975060209060405180938192633a9b44eb60e21b8352604060048401526044830190610c49565b606435602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156107045761084d575b50863b1561082f57899594939291906001600160a01b0388167f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa25f80a25f6103af565b63524c1bff60e01b5f9081526001600160a01b038816600452602490fd5b6020813d60201161087c575b8161086660209383610ba6565b8101031261070f5761087790610c8e565b6107ec565b3d9150610859565b635e11715560e11b5f5260045ffd5b9950506040893d6040116108cc575b816108af60409383610ba6565b8101031261070f5760206108c28a610c8e565b990151985f610394565b3d91506108a2565b60405162461bcd60e51b815260206004820152601460248201527329b2b73232b9103737ba1026a2a9a9a2a723a2a960611b6044820152606490fd5b61014036600319011261070f57600435610928610b4a565b60443567ffffffffffffffff811161070f57610948903690600401610bc8565b60843592600584101561070f5760a43567ffffffffffffffff811161070f57610975903690600401610bc8565b9261097e610c1e565b610986610c33565b906101243567ffffffffffffffff811161070f576109a8903690600401610bc8565b9160405196879463804063f560e01b6020870152336024870152600160a01b60019003169687604487015260648601610140905261016486016109ea91610c49565b60643560848701526109ff60a487018b610c6d565b8581036023190160c4870152610a1491610c49565b9160c43560e486015265ffffffffffff1661010485015265ffffffffffff1661012484015260231983820301610144840152610a4f91610c49565b03601f1981018452610a619084610ba6565b6040518093637056f41f60e01b8252826004830152836024830152604482016060905260648201610a9191610c49565b6023602160991b0191859103815a6020945f91f1928315610704575f93610af4575b507f2d3727a4f4f062b4982e32de095d90f9bf0788ea48daca5d3553e09e58a121676040602095610ae682518092610c6d565b8587820152a3604051908152f35b9392506020843d602011610b42575b81610b1060209383610ba6565b8101031261070f57925191927f2d3727a4f4f062b4982e32de095d90f9bf0788ea48daca5d3553e09e58a12167610ab3565b3d9150610b03565b602435906001600160a01b038216820361070f57565b600435906001600160a01b038216820361070f57565b60c0810190811067ffffffffffffffff821117610b9257604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610b9257604052565b81601f8201121561070f5780359067ffffffffffffffff8211610b925760405192610bfd601f8401601f191660200185610ba6565b8284526020838301011161070f57815f926020809301838601378301015290565b60e4359065ffffffffffff8216820361070f57565b610104359065ffffffffffff8216820361070f57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b906005821015610c7a5752565b634e487b7160e01b5f52602160045260245ffd5b51906001600160a01b038216820361070f57565b6001600160a01b039091168152604060208201819052610cc492910190610c49565b90565b9091610d2f60a0610cc49460408552600180831b0381511660408601526020810151606086015265ffffffffffff604082015116608086015265ffffffffffff60608201511682860152608081015160c0860152015160c060e0850152610100840190610c49565b916020818403910152610c49565b8051821015610d515760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe0b49ca789bd4c6cc02785aec5af2069797496c911cec31ea036a695cab7c4628a164736f6c634300081a000a" as Hex;
export const deployedBytecode =
    "0x60806040526004361015610011575f80fd5b5f803560e01c8063289860be14610910578063804063f5146102b4578063ea424b2c146102455763f2662cf714610046575f80fd5b346102425760203660031901126102425760043567ffffffffffffffff811161023e573660238201121561023e57806004013567ffffffffffffffff811161022a576040519161009c60208360051b0184610ba6565b818352602460606020850193028201019036821161022657602401915b8183106101a357505050815b815181101561019f578060406100dd60019385610d3d565b510151151533855284602052604085206100f78386610d3d565b5151865260205260408520838060a01b0360206101148588610d3d565b51015116848060a01b03165f5260205260405f209060ff8019835416911617905561013f8184610d3d565b5151828060a01b0360206101538487610d3d565b5101511660406101638487610d3d565b510151151560405191825260208201527f8e9e959238a120fa682f8f13c6406514da31a593c2ae3bac8130ab3f9d4dcaca60403392a3016100c5565b8280f35b60608336031261022657604051906060820182811067ffffffffffffffff821117610212576040528335825260208401356001600160a01b038116810361020e576020830152604084013590811515820361020e5782602092604060609501528152019201916100b9565b8680fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b634e487b7160e01b83526041600452602483fd5b5080fd5b80fd5b50346102425760603660031901126102425761025f610b60565b60443591906001600160a01b038316830361023e579060409160018060a01b03168152806020528181206024358252602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b5061014036600319011261070f576102ca610b60565b6102d2610b4a565b9060443567ffffffffffffffff811161070f576102f3903690600401610bc8565b9160843592600584101561070f5760a43567ffffffffffffffff811161070f57610321903690600401610bc8565b60c43561032c610c1e565b91610335610c33565b6101243567ffffffffffffffff811161070f57610356903690600401610bc8565b936022602160991b011933016108d45760408051633c9b65f760e11b81529890896004816023602160991b015afa988915610704575f905f9a610893575b50306001600160a01b039091160361088457868b9751610774575b5060048a036103e8575b868a8a5f80516020610d6683398151915260208c6103da6040518096610c6d565b6001600160a01b031693a380f35b60028a036104d857509065ffffffffffff80926040519561040887610b76565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104c9576040516325db05bf60e11b81529284928492839182916104839160048401610cc7565b039134905af180156104cd576104b4575b505060205f80516020610d66833981519152915b9185915f8080806103b9565b816104be91610ba6565b6104c957835f610494565b8380fd5b6040513d84823e3d90fd5b60038a036105b157509065ffffffffffff8092604051956104f887610b76565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104c95760405163035c469560e31b81529284928492839182916105739160048401610cc7565b039134905af180156104cd5761059c575b505060205f80516020610d66833981519152916104a8565b816105a691610ba6565b6104c957835f610584565b9450925065ffffffffffff919450168042118015610763575b6107445750506001600160a01b038381165f8181526020818152604080832089845282528083209486168352939052919091205460ff1615610722575050849084155f14610669577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561066557610573918391604051808095819463d26cdce360e01b83528960048401610ca2565b8280fd5b905060018403610713577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561070f576106c6915f91604051808095819463e508600360e01b83528860048401610ca2565b039134905af18015610704576106ee575b5060205f80516020610d66833981519152916104a8565b6106fb9194505f90610ba6565b5f9260206106d7565b6040513d5f823e3d90fd5b5f80fd5b63f483256360e01b5f5260045ffd5b849063a4d9a4d960e01b5f5260045260245260018060a01b031660445260645ffd5b65ffffffffffff9250631156860560e11b5f526004521660245260445ffd5b5065ffffffffffff821642106105ca565b883b6103af576107aa919293949596975060209060405180938192633a9b44eb60e21b8352604060048401526044830190610c49565b606435602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156107045761084d575b50863b1561082f57899594939291906001600160a01b0388167f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa25f80a25f6103af565b63524c1bff60e01b5f9081526001600160a01b038816600452602490fd5b6020813d60201161087c575b8161086660209383610ba6565b8101031261070f5761087790610c8e565b6107ec565b3d9150610859565b635e11715560e11b5f5260045ffd5b9950506040893d6040116108cc575b816108af60409383610ba6565b8101031261070f5760206108c28a610c8e565b990151985f610394565b3d91506108a2565b60405162461bcd60e51b815260206004820152601460248201527329b2b73232b9103737ba1026a2a9a9a2a723a2a960611b6044820152606490fd5b61014036600319011261070f57600435610928610b4a565b60443567ffffffffffffffff811161070f57610948903690600401610bc8565b60843592600584101561070f5760a43567ffffffffffffffff811161070f57610975903690600401610bc8565b9261097e610c1e565b610986610c33565b906101243567ffffffffffffffff811161070f576109a8903690600401610bc8565b9160405196879463804063f560e01b6020870152336024870152600160a01b60019003169687604487015260648601610140905261016486016109ea91610c49565b60643560848701526109ff60a487018b610c6d565b8581036023190160c4870152610a1491610c49565b9160c43560e486015265ffffffffffff1661010485015265ffffffffffff1661012484015260231983820301610144840152610a4f91610c49565b03601f1981018452610a619084610ba6565b6040518093637056f41f60e01b8252826004830152836024830152604482016060905260648201610a9191610c49565b6023602160991b0191859103815a6020945f91f1928315610704575f93610af4575b507f2d3727a4f4f062b4982e32de095d90f9bf0788ea48daca5d3553e09e58a121676040602095610ae682518092610c6d565b8587820152a3604051908152f35b9392506020843d602011610b42575b81610b1060209383610ba6565b8101031261070f57925191927f2d3727a4f4f062b4982e32de095d90f9bf0788ea48daca5d3553e09e58a12167610ab3565b3d9150610b03565b602435906001600160a01b038216820361070f57565b600435906001600160a01b038216820361070f57565b60c0810190811067ffffffffffffffff821117610b9257604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610b9257604052565b81601f8201121561070f5780359067ffffffffffffffff8211610b925760405192610bfd601f8401601f191660200185610ba6565b8284526020838301011161070f57815f926020809301838601378301015290565b60e4359065ffffffffffff8216820361070f57565b610104359065ffffffffffff8216820361070f57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b906005821015610c7a5752565b634e487b7160e01b5f52602160045260245ffd5b51906001600160a01b038216820361070f57565b6001600160a01b039091168152604060208201819052610cc492910190610c49565b90565b9091610d2f60a0610cc49460408552600180831b0381511660408601526020810151606086015265ffffffffffff604082015116608086015265ffffffffffff60608201511682860152608081015160c0860152015160c060e0850152610100840190610c49565b916020818403910152610c49565b8051821015610d515760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe0b49ca789bd4c6cc02785aec5af2069797496c911cec31ea036a695cab7c4628a164736f6c634300081a000a" as Hex;
export const SuperchainERC7579ExecutorRouter = {
    abi,
    bytecode,
    deployedBytecode,
};
