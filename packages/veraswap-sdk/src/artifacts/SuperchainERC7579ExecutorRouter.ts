import { Hex } from "viem";

export const _constructor = {
    type: "constructor",
    inputs: [
        { name: "_executor", type: "address", internalType: "address" },
        { name: "_factory", type: "address", internalType: "address" },
    ],
    stateMutability: "nonpayable",
} as const;
export const callRemote = {
    type: "function",
    name: "callRemote",
    inputs: [
        { name: "destination", type: "uint32", internalType: "uint32" },
        { name: "account", type: "address", internalType: "address" },
        { name: "initData", type: "bytes", internalType: "bytes" },
        { name: "initSalt", type: "bytes32", internalType: "bytes32" },
        { name: "executionMode", type: "uint8", internalType: "enum ERC7579ExecutorMessage.ExecutionMode" },
        { name: "callData", type: "bytes", internalType: "bytes" },
        { name: "nonce", type: "uint256", internalType: "uint256" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [{ name: "", type: "bytes32", internalType: "bytes32" }],
    stateMutability: "payable",
} as const;
export const handle = {
    type: "function",
    name: "handle",
    inputs: [
        { name: "owner", type: "address", internalType: "address" },
        { name: "account", type: "address", internalType: "address" },
        { name: "initData", type: "bytes", internalType: "bytes" },
        { name: "initSalt", type: "bytes32", internalType: "bytes32" },
        { name: "executionMode", type: "uint8", internalType: "enum ERC7579ExecutorMessage.ExecutionMode" },
        { name: "callData", type: "bytes", internalType: "bytes" },
        { name: "nonce", type: "uint256", internalType: "uint256" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "signature", type: "bytes", internalType: "bytes" },
    ],
    outputs: [],
    stateMutability: "payable",
} as const;
export const owners = {
    type: "function",
    name: "owners",
    inputs: [
        { name: "account", type: "address", internalType: "address" },
        { name: "origin", type: "uint256", internalType: "uint256" },
        { name: "owner", type: "address", internalType: "address" },
    ],
    outputs: [{ name: "", type: "bool", internalType: "bool" }],
    stateMutability: "view",
} as const;
export const setAccountOwners = {
    type: "function",
    name: "setAccountOwners",
    inputs: [
        {
            name: "_owners",
            type: "tuple[]",
            internalType: "struct SuperchainERC7579ExecutorRouter.RemoteRouterOwner[]",
            components: [
                { name: "domain", type: "uint32", internalType: "uint32" },
                { name: "owner", type: "address", internalType: "address" },
                { name: "enabled", type: "bool", internalType: "bool" },
            ],
        },
    ],
    outputs: [],
    stateMutability: "nonpayable",
} as const;
export const AccountCreated = {
    type: "event",
    name: "AccountCreated",
    inputs: [{ name: "account", type: "address", indexed: true, internalType: "address" }],
    anonymous: false,
} as const;
export const AccountRemoteRouterOwnerSet = {
    type: "event",
    name: "AccountRemoteRouterOwnerSet",
    inputs: [
        { name: "account", type: "address", indexed: true, internalType: "address" },
        { name: "domain", type: "uint32", indexed: true, internalType: "uint32" },
        { name: "owner", type: "address", indexed: false, internalType: "address" },
        { name: "enabled", type: "bool", indexed: false, internalType: "bool" },
    ],
    anonymous: false,
} as const;
export const RemoteCallDispatched = {
    type: "event",
    name: "RemoteCallDispatched",
    inputs: [
        { name: "destination", type: "uint32", indexed: true, internalType: "uint32" },
        { name: "account", type: "address", indexed: true, internalType: "address" },
        {
            name: "executionMode",
            type: "uint8",
            indexed: false,
            internalType: "enum ERC7579ExecutorMessage.ExecutionMode",
        },
        { name: "messageId", type: "bytes32", indexed: false, internalType: "bytes32" },
    ],
    anonymous: false,
} as const;
export const RemoteCallProcessed = {
    type: "event",
    name: "RemoteCallProcessed",
    inputs: [
        { name: "origin", type: "uint256", indexed: true, internalType: "uint256" },
        { name: "account", type: "address", indexed: true, internalType: "address" },
        {
            name: "executionMode",
            type: "uint8",
            indexed: false,
            internalType: "enum ERC7579ExecutorMessage.ExecutionMode",
        },
    ],
    anonymous: false,
} as const;
export const AccountDeploymentFailed = {
    type: "error",
    name: "AccountDeploymentFailed",
    inputs: [{ name: "account", type: "address", internalType: "address" }],
} as const;
export const InvalidCrossDomainSender = { type: "error", name: "InvalidCrossDomainSender", inputs: [] } as const;
export const InvalidExecutorMode = { type: "error", name: "InvalidExecutorMode", inputs: [] } as const;
export const InvalidRemoteRouterOwner = {
    type: "error",
    name: "InvalidRemoteRouterOwner",
    inputs: [
        { name: "account", type: "address", internalType: "address" },
        { name: "domain", type: "uint256", internalType: "uint256" },
        { name: "owner", type: "address", internalType: "address" },
    ],
} as const;
export const InvalidTimestamp = {
    type: "error",
    name: "InvalidTimestamp",
    inputs: [
        { name: "validUntil", type: "uint48", internalType: "uint48" },
        { name: "validAfter", type: "uint48", internalType: "uint48" },
    ],
} as const;
export const functions = [_constructor, callRemote, handle, owners, setAccountOwners] as const;
export const events = [AccountCreated, AccountRemoteRouterOwnerSet, RemoteCallDispatched, RemoteCallProcessed] as const;
export const errors = [
    AccountDeploymentFailed,
    InvalidCrossDomainSender,
    InvalidExecutorMode,
    InvalidRemoteRouterOwner,
    InvalidTimestamp,
] as const;
export const abi = [...functions, ...events, ...errors] as const;

export const bytecode =
    "0x60c034609357601f610e9438819003918201601f19168301916001600160401b038311848410176097578084926040948552833981010312609357604b602060458360ab565b920160ab565b6001600160a01b039182166080521660a052604051610dd590816100bf8239608051818181610451015281816105410152818161062d015261068e015260a051816107d00152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b038216820360935756fe60806040526004361015610011575f80fd5b5f803560e01c806351a5521914610945578063804063f5146102cd578063ea424b2c1461025e5763f7585d8714610046575f80fd5b3461025b57602036600319011261025b5760043567ffffffffffffffff8111610257573660238201121561025757806004013567ffffffffffffffff8111610243576040519161009c60208360051b0184610be9565b818352602460606020850193028201019036821161023f57602401915b8183106101af57505050815b81518110156101ab578060406100dd60019385610d80565b5101511515338552846020526040852063ffffffff6100fc8487610d80565b515116865260205260408520838060a01b03602061011a8588610d80565b51015116848060a01b03165f5260205260405f209060ff8019835416911617905563ffffffff61014a8285610d80565b515116828060a01b03602061015f8487610d80565b51015116604061016f8487610d80565b510151151560405191825260208201527fe4acc72aaac7314967838ee85ec131004ae3a8a7f5d95f8d59f61fd3847528a360403392a3016100c5565b8280f35b60608336031261023f57604051906060820182811067ffffffffffffffff82111761022b57604052833563ffffffff8116810361022757825260208401356001600160a01b038116810361022757602083015260408401359081151582036102275782602092604060609501528152019201916100b9565b8680fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b634e487b7160e01b83526041600452602483fd5b5080fd5b80fd5b503461025b57606036600319011261025b57610278610ba3565b60443591906001600160a01b0383168303610257579060409160018060a01b03168152806020528181206024358252602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b50610140366003190112610728576102e3610ba3565b6102eb610b8d565b9060443567ffffffffffffffff81116107285761030c903690600401610c0b565b916084359260058410156107285760a43567ffffffffffffffff81116107285761033a903690600401610c0b565b60c435610345610c61565b9161034e610c76565b6101243567ffffffffffffffff81116107285761036f903690600401610c0b565b936022602160991b011933016108ed5760408051633c9b65f760e11b81529890896004816023602160991b015afa98891561071d575f905f9a6108ac575b50306001600160a01b039091160361089d57868b975161078d575b5060048a03610401575b868a8a5f80516020610da983398151915260208c6103f36040518096610cb0565b6001600160a01b031693a380f35b60028a036104f157509065ffffffffffff80926040519561042187610bb9565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104e2576040516325db05bf60e11b815292849284928391829161049c9160048401610d0a565b039134905af180156104e6576104cd575b505060205f80516020610da9833981519152915b9185915f8080806103d2565b816104d791610be9565b6104e257835f6104ad565b8380fd5b6040513d84823e3d90fd5b60038a036105ca57509065ffffffffffff80926040519561051187610bb9565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104e25760405163035c469560e31b815292849284928391829161058c9160048401610d0a565b039134905af180156104e6576105b5575b505060205f80516020610da9833981519152916104c1565b816105bf91610be9565b6104e257835f61059d565b9450925065ffffffffffff91945016804211801561077c575b61075d5750506001600160a01b038381165f8181526020818152604080832089845282528083209486168352939052919091205460ff161561073b575050849084155f14610682577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561067e5761058c918391604051808095819463d26cdce360e01b83528960048401610ce5565b8280fd5b90506001840361072c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15610728576106df915f91604051808095819463e508600360e01b83528860048401610ce5565b039134905af1801561071d57610707575b5060205f80516020610da9833981519152916104c1565b6107149194505f90610be9565b5f9260206106f0565b6040513d5f823e3d90fd5b5f80fd5b63f483256360e01b5f5260045ffd5b849063a4d9a4d960e01b5f5260045260245260018060a01b031660445260645ffd5b65ffffffffffff9250631156860560e11b5f526004521660245260445ffd5b5065ffffffffffff821642106105e3565b883b6103c8576107c3919293949596975060209060405180938192633a9b44eb60e21b8352604060048401526044830190610c8c565b606435602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561071d57610866575b50863b1561084857899594939291906001600160a01b0388167f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa25f80a25f6103c8565b63524c1bff60e01b5f9081526001600160a01b038816600452602490fd5b6020813d602011610895575b8161087f60209383610be9565b810103126107285761089090610cd1565b610805565b3d9150610872565b635e11715560e11b5f5260045ffd5b9950506040893d6040116108e5575b816108c860409383610be9565b810103126107285760206108db8a610cd1565b990151985f6103ad565b3d91506108bb565b60405162461bcd60e51b815260206004820152602a60248201527f53656e646572206e6f74204c325f544f5f4c325f43524f53535f444f4d41494e6044820152692fa6a2a9a9a2a723a2a960b11b6064820152608490fd5b6101403660031901126107285760043563ffffffff81168091036107285761096b610b8d565b60443567ffffffffffffffff81116107285761098b903690600401610c0b565b6084359260058410156107285760a43567ffffffffffffffff8111610728576109b8903690600401610c0b565b926109c1610c61565b6109c9610c76565b906101243567ffffffffffffffff8111610728576109eb903690600401610c0b565b9160405196879463804063f560e01b6020870152336024870152600160a01b6001900316968760448701526064860161014090526101648601610a2d91610c8c565b6064356084870152610a4260a487018b610cb0565b8581036023190160c4870152610a5791610c8c565b9160c43560e486015265ffffffffffff1661010485015265ffffffffffff1661012484015260231983820301610144840152610a9291610c8c565b03601f1981018452610aa49084610be9565b6040518093637056f41f60e01b8252826004830152836024830152604482016060905260648201610ad491610c8c565b6023602160991b0191859103815a6020945f91f192831561071d575f93610b37575b507ff529aa657149a98f9f4b00745d51362ddad3628140f692056ec2fec604ab949e6040602095610b2982518092610cb0565b8587820152a3604051908152f35b9392506020843d602011610b85575b81610b5360209383610be9565b8101031261072857925191927ff529aa657149a98f9f4b00745d51362ddad3628140f692056ec2fec604ab949e610af6565b3d9150610b46565b602435906001600160a01b038216820361072857565b600435906001600160a01b038216820361072857565b60c0810190811067ffffffffffffffff821117610bd557604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610bd557604052565b81601f820112156107285780359067ffffffffffffffff8211610bd55760405192610c40601f8401601f191660200185610be9565b8284526020838301011161072857815f926020809301838601378301015290565b60e4359065ffffffffffff8216820361072857565b610104359065ffffffffffff8216820361072857565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b906005821015610cbd5752565b634e487b7160e01b5f52602160045260245ffd5b51906001600160a01b038216820361072857565b6001600160a01b039091168152604060208201819052610d0792910190610c8c565b90565b9091610d7260a0610d079460408552600180831b0381511660408601526020810151606086015265ffffffffffff604082015116608086015265ffffffffffff60608201511682860152608081015160c0860152015160c060e0850152610100840190610c8c565b916020818403910152610c8c565b8051821015610d945760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe0b49ca789bd4c6cc02785aec5af2069797496c911cec31ea036a695cab7c4628a164736f6c634300081a000a" as Hex;
export const deployedBytecode =
    "0x60806040526004361015610011575f80fd5b5f803560e01c806351a5521914610945578063804063f5146102cd578063ea424b2c1461025e5763f7585d8714610046575f80fd5b3461025b57602036600319011261025b5760043567ffffffffffffffff8111610257573660238201121561025757806004013567ffffffffffffffff8111610243576040519161009c60208360051b0184610be9565b818352602460606020850193028201019036821161023f57602401915b8183106101af57505050815b81518110156101ab578060406100dd60019385610d80565b5101511515338552846020526040852063ffffffff6100fc8487610d80565b515116865260205260408520838060a01b03602061011a8588610d80565b51015116848060a01b03165f5260205260405f209060ff8019835416911617905563ffffffff61014a8285610d80565b515116828060a01b03602061015f8487610d80565b51015116604061016f8487610d80565b510151151560405191825260208201527fe4acc72aaac7314967838ee85ec131004ae3a8a7f5d95f8d59f61fd3847528a360403392a3016100c5565b8280f35b60608336031261023f57604051906060820182811067ffffffffffffffff82111761022b57604052833563ffffffff8116810361022757825260208401356001600160a01b038116810361022757602083015260408401359081151582036102275782602092604060609501528152019201916100b9565b8680fd5b634e487b7160e01b87526041600452602487fd5b8480fd5b634e487b7160e01b83526041600452602483fd5b5080fd5b80fd5b503461025b57606036600319011261025b57610278610ba3565b60443591906001600160a01b0383168303610257579060409160018060a01b03168152806020528181206024358252602052209060018060a01b03165f52602052602060ff60405f2054166040519015158152f35b50610140366003190112610728576102e3610ba3565b6102eb610b8d565b9060443567ffffffffffffffff81116107285761030c903690600401610c0b565b916084359260058410156107285760a43567ffffffffffffffff81116107285761033a903690600401610c0b565b60c435610345610c61565b9161034e610c76565b6101243567ffffffffffffffff81116107285761036f903690600401610c0b565b936022602160991b011933016108ed5760408051633c9b65f760e11b81529890896004816023602160991b015afa98891561071d575f905f9a6108ac575b50306001600160a01b039091160361089d57868b975161078d575b5060048a03610401575b868a8a5f80516020610da983398151915260208c6103f36040518096610cb0565b6001600160a01b031693a380f35b60028a036104f157509065ffffffffffff80926040519561042187610bb9565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104e2576040516325db05bf60e11b815292849284928391829161049c9160048401610d0a565b039134905af180156104e6576104cd575b505060205f80516020610da9833981519152915b9185915f8080806103d2565b816104d791610be9565b6104e257835f6104ad565b8380fd5b6040513d84823e3d90fd5b60038a036105ca57509065ffffffffffff80926040519561051187610bb9565b60018060a01b038a168752602087015216604085015216606083015234608083015260a082015260018060a01b037f00000000000000000000000000000000000000000000000000000000000000001691823b156104e25760405163035c469560e31b815292849284928391829161058c9160048401610d0a565b039134905af180156104e6576105b5575b505060205f80516020610da9833981519152916104c1565b816105bf91610be9565b6104e257835f61059d565b9450925065ffffffffffff91945016804211801561077c575b61075d5750506001600160a01b038381165f8181526020818152604080832089845282528083209486168352939052919091205460ff161561073b575050849084155f14610682577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561067e5761058c918391604051808095819463d26cdce360e01b83528960048401610ce5565b8280fd5b90506001840361072c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15610728576106df915f91604051808095819463e508600360e01b83528860048401610ce5565b039134905af1801561071d57610707575b5060205f80516020610da9833981519152916104c1565b6107149194505f90610be9565b5f9260206106f0565b6040513d5f823e3d90fd5b5f80fd5b63f483256360e01b5f5260045ffd5b849063a4d9a4d960e01b5f5260045260245260018060a01b031660445260645ffd5b65ffffffffffff9250631156860560e11b5f526004521660245260445ffd5b5065ffffffffffff821642106105e3565b883b6103c8576107c3919293949596975060209060405180938192633a9b44eb60e21b8352604060048401526044830190610c8c565b606435602483015203815f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561071d57610866575b50863b1561084857899594939291906001600160a01b0388167f805996f252884581e2f74cf3d2b03564d5ec26ccc90850ae12653dc1b72d1fa25f80a25f6103c8565b63524c1bff60e01b5f9081526001600160a01b038816600452602490fd5b6020813d602011610895575b8161087f60209383610be9565b810103126107285761089090610cd1565b610805565b3d9150610872565b635e11715560e11b5f5260045ffd5b9950506040893d6040116108e5575b816108c860409383610be9565b810103126107285760206108db8a610cd1565b990151985f6103ad565b3d91506108bb565b60405162461bcd60e51b815260206004820152602a60248201527f53656e646572206e6f74204c325f544f5f4c325f43524f53535f444f4d41494e6044820152692fa6a2a9a9a2a723a2a960b11b6064820152608490fd5b6101403660031901126107285760043563ffffffff81168091036107285761096b610b8d565b60443567ffffffffffffffff81116107285761098b903690600401610c0b565b6084359260058410156107285760a43567ffffffffffffffff8111610728576109b8903690600401610c0b565b926109c1610c61565b6109c9610c76565b906101243567ffffffffffffffff8111610728576109eb903690600401610c0b565b9160405196879463804063f560e01b6020870152336024870152600160a01b6001900316968760448701526064860161014090526101648601610a2d91610c8c565b6064356084870152610a4260a487018b610cb0565b8581036023190160c4870152610a5791610c8c565b9160c43560e486015265ffffffffffff1661010485015265ffffffffffff1661012484015260231983820301610144840152610a9291610c8c565b03601f1981018452610aa49084610be9565b6040518093637056f41f60e01b8252826004830152836024830152604482016060905260648201610ad491610c8c565b6023602160991b0191859103815a6020945f91f192831561071d575f93610b37575b507ff529aa657149a98f9f4b00745d51362ddad3628140f692056ec2fec604ab949e6040602095610b2982518092610cb0565b8587820152a3604051908152f35b9392506020843d602011610b85575b81610b5360209383610be9565b8101031261072857925191927ff529aa657149a98f9f4b00745d51362ddad3628140f692056ec2fec604ab949e610af6565b3d9150610b46565b602435906001600160a01b038216820361072857565b600435906001600160a01b038216820361072857565b60c0810190811067ffffffffffffffff821117610bd557604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610bd557604052565b81601f820112156107285780359067ffffffffffffffff8211610bd55760405192610c40601f8401601f191660200185610be9565b8284526020838301011161072857815f926020809301838601378301015290565b60e4359065ffffffffffff8216820361072857565b610104359065ffffffffffff8216820361072857565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b906005821015610cbd5752565b634e487b7160e01b5f52602160045260245ffd5b51906001600160a01b038216820361072857565b6001600160a01b039091168152604060208201819052610d0792910190610c8c565b90565b9091610d7260a0610d079460408552600180831b0381511660408601526020810151606086015265ffffffffffff604082015116608086015265ffffffffffff60608201511682860152608081015160c0860152015160c060e0850152610100840190610c8c565b916020818403910152610c8c565b8051821015610d945760209160051b010190565b634e487b7160e01b5f52603260045260245ffdfe0b49ca789bd4c6cc02785aec5af2069797496c911cec31ea036a695cab7c4628a164736f6c634300081a000a" as Hex;
export const SuperchainERC7579ExecutorRouter = {
    abi,
    bytecode,
    deployedBytecode,
};
