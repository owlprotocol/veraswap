export const errors = [
    {
        type: "error",
        name: "AllowanceExpired",
        inputs: [{ name: "deadline", type: "uint256", internalType: "uint256" }],
    },
    { type: "error", name: "ExcessiveInvalidation", inputs: [] },
    {
        type: "error",
        name: "InsufficientAllowance",
        inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }],
    },
    { type: "error", name: "InvalidAmount", inputs: [{ name: "maxAmount", type: "uint256", internalType: "uint256" }] },
    { type: "error", name: "LengthMismatch", inputs: [] },
    {
        type: "error",
        name: "AlreadySubscribed",
        inputs: [
            { name: "tokenId", type: "uint256", internalType: "uint256" },
            { name: "subscriber", type: "address", internalType: "address" },
        ],
    },
    {
        type: "error",
        name: "BurnNotificationReverted",
        inputs: [
            { name: "subscriber", type: "address", internalType: "address" },
            { name: "reason", type: "bytes", internalType: "bytes" },
        ],
    },
    { type: "error", name: "DeadlinePassed", inputs: [{ name: "deadline", type: "uint256", internalType: "uint256" }] },
    { type: "error", name: "GasLimitTooLow", inputs: [] },
    {
        type: "error",
        name: "ModifyLiquidityNotificationReverted",
        inputs: [
            { name: "subscriber", type: "address", internalType: "address" },
            { name: "reason", type: "bytes", internalType: "bytes" },
        ],
    },
    { type: "error", name: "NoCodeSubscriber", inputs: [] },
    { type: "error", name: "NoSelfPermit", inputs: [] },
    { type: "error", name: "NonceAlreadyUsed", inputs: [] },
    { type: "error", name: "NotApproved", inputs: [{ name: "caller", type: "address", internalType: "address" }] },
    { type: "error", name: "NotSubscribed", inputs: [] },
    { type: "error", name: "PoolManagerMustBeLocked", inputs: [] },
    { type: "error", name: "SignatureDeadlineExpired", inputs: [] },
    {
        type: "error",
        name: "SubscriptionReverted",
        inputs: [
            { name: "subscriber", type: "address", internalType: "address" },
            { name: "reason", type: "bytes", internalType: "bytes" },
        ],
    },
    { type: "error", name: "Unauthorized", inputs: [] },
    { type: "error", name: "AlreadyUnlocked", inputs: [] },
    {
        type: "error",
        name: "CurrenciesOutOfOrderOrEqual",
        inputs: [
            { name: "currency0", type: "address", internalType: "address" },
            { name: "currency1", type: "address", internalType: "address" },
        ],
    },
    { type: "error", name: "CurrencyNotSettled", inputs: [] },
    { type: "error", name: "InvalidCaller", inputs: [] },
    { type: "error", name: "ManagerLocked", inputs: [] },
    { type: "error", name: "MustClearExactPositiveDelta", inputs: [] },
    { type: "error", name: "NonzeroNativeValue", inputs: [] },
    { type: "error", name: "PoolNotInitialized", inputs: [] },
    { type: "error", name: "ProtocolFeeCurrencySynced", inputs: [] },
    { type: "error", name: "ProtocolFeeTooLarge", inputs: [{ name: "fee", type: "uint24", internalType: "uint24" }] },
    { type: "error", name: "SwapAmountCannotBeZero", inputs: [] },
    {
        type: "error",
        name: "TickSpacingTooLarge",
        inputs: [{ name: "tickSpacing", type: "int24", internalType: "int24" }],
    },
    {
        type: "error",
        name: "TickSpacingTooSmall",
        inputs: [{ name: "tickSpacing", type: "int24", internalType: "int24" }],
    },
    { type: "error", name: "UnauthorizedDynamicLPFeeUpdate", inputs: [] },
    { type: "error", name: "UnsupportedProtocolError", inputs: [] },
    { type: "error", name: "DelegateCallNotAllowed", inputs: [] },
    { type: "error", name: "ContractLocked", inputs: [] },
    {
        type: "error",
        name: "DeltaNotNegative",
        inputs: [{ name: "currency", type: "address", internalType: "Currency" }],
    },
    {
        type: "error",
        name: "DeltaNotPositive",
        inputs: [{ name: "currency", type: "address", internalType: "Currency" }],
    },
    { type: "error", name: "InputLengthMismatch", inputs: [] },
    { type: "error", name: "InsufficientBalance", inputs: [] },
    { type: "error", name: "InvalidContractSignature", inputs: [] },
    { type: "error", name: "InvalidEthSender", inputs: [] },
    { type: "error", name: "InvalidSignature", inputs: [] },
    { type: "error", name: "InvalidSignatureLength", inputs: [] },
    { type: "error", name: "InvalidSigner", inputs: [] },
    {
        type: "error",
        name: "MaximumAmountExceeded",
        inputs: [
            { name: "maximumAmount", type: "uint128", internalType: "uint128" },
            { name: "amountRequested", type: "uint128", internalType: "uint128" },
        ],
    },
    {
        type: "error",
        name: "MinimumAmountInsufficient",
        inputs: [
            { name: "minimumAmount", type: "uint128", internalType: "uint128" },
            { name: "amountReceived", type: "uint128", internalType: "uint128" },
        ],
    },
    { type: "error", name: "NotPoolManager", inputs: [] },
    {
        type: "error",
        name: "UnsupportedAction",
        inputs: [{ name: "action", type: "uint256", internalType: "uint256" }],
    },
    { type: "error", name: "ETHNotAccepted", inputs: [] },
    {
        type: "error",
        name: "ExecutionFailed",
        inputs: [
            { name: "commandIndex", type: "uint256", internalType: "uint256" },
            { name: "message", type: "bytes", internalType: "bytes" },
        ],
    },
    { type: "error", name: "TransactionDeadlinePassed", inputs: [] },
    { type: "error", name: "BalanceTooLow", inputs: [] },
    { type: "error", name: "CallTargetPermit2", inputs: [] },
    { type: "error", name: "FromAddressIsNotOwner", inputs: [] },
    { type: "error", name: "InsufficientETH", inputs: [] },
    { type: "error", name: "InsufficientToken", inputs: [] },
    { type: "error", name: "InvalidAction", inputs: [{ name: "action", type: "bytes4", internalType: "bytes4" }] },
    { type: "error", name: "InvalidBips", inputs: [] },
    {
        type: "error",
        name: "InvalidCommandType",
        inputs: [{ name: "commandType", type: "uint256", internalType: "uint256" }],
    },
    { type: "error", name: "InvalidPath", inputs: [] },
    { type: "error", name: "InvalidReserves", inputs: [] },
    {
        type: "error",
        name: "NotAuthorizedForToken",
        inputs: [{ name: "tokenId", type: "uint256", internalType: "uint256" }],
    },
    { type: "error", name: "OnlyMintAllowed", inputs: [] },
    { type: "error", name: "SliceOutOfBounds", inputs: [] },
    { type: "error", name: "UnsafeCast", inputs: [] },
    { type: "error", name: "V2InvalidPath", inputs: [] },
    { type: "error", name: "V2TooLittleReceived", inputs: [] },
    { type: "error", name: "V2TooMuchRequested", inputs: [] },
    { type: "error", name: "V3InvalidAmountOut", inputs: [] },
    { type: "error", name: "V3InvalidCaller", inputs: [] },
    { type: "error", name: "V3InvalidSwap", inputs: [] },
    { type: "error", name: "V3TooLittleReceived", inputs: [] },
    { type: "error", name: "V3TooMuchRequested", inputs: [] },
    {
        type: "error",
        name: "V4TooLittleReceived",
        inputs: [
            { name: "minAmountOutReceived", type: "uint256", internalType: "uint256" },
            { name: "amountReceived", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "V4TooMuchRequested",
        inputs: [
            { name: "maxAmountInRequested", type: "uint256", internalType: "uint256" },
            { name: "amountRequested", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "NotEnoughLiquidity",
        inputs: [{ name: "poolId", type: "bytes32", internalType: "PoolId" }],
    },
    { type: "error", name: "NotSelf", inputs: [] },
    { type: "error", name: "QuoteSwap", inputs: [{ name: "amount", type: "uint256", internalType: "uint256" }] },
    { type: "error", name: "UnexpectedCallSuccess", inputs: [] },
    {
        type: "error",
        name: "UnexpectedRevertBytes",
        inputs: [{ name: "revertData", type: "bytes", internalType: "bytes" }],
    },
    { type: "error", name: "ContractUnlocked", inputs: [] },
    { type: "error", name: "NegativeBalanceDelta", inputs: [] },
    { type: "error", name: "TargetIsHook", inputs: [] },
    { type: "error", name: "TargetIsISM", inputs: [] },
    { type: "error", name: "TargetIsMailbox", inputs: [] },
    { type: "error", name: "BalanceZero", inputs: [] },
    {
        type: "error",
        name: "AccountDeploymentFailed",
        inputs: [{ name: "account", type: "address", internalType: "address" }],
    },
    { type: "error", name: "InvalidExecutorMode", inputs: [] },
    {
        type: "error",
        name: "InvalidRemoteRouterOwner",
        inputs: [
            { name: "account", type: "address", internalType: "address" },
            { name: "domain", type: "uint32", internalType: "uint32" },
            { name: "router", type: "address", internalType: "address" },
            { name: "owner", type: "address", internalType: "address" },
        ],
    },
    {
        type: "error",
        name: "InvalidTimestamp",
        inputs: [
            { name: "validUntil", type: "uint48", internalType: "uint48" },
            { name: "validAfter", type: "uint48", internalType: "uint48" },
        ],
    },
    { type: "error", name: "EventPayloadNotSentMessage", inputs: [] },
    { type: "error", name: "IdOriginNotL2ToL2CrossDomainMessenger", inputs: [] },
    { type: "error", name: "InvalidChainId", inputs: [] },
    { type: "error", name: "MessageAlreadyRelayed", inputs: [] },
    { type: "error", name: "MessageDestinationNotRelayChain", inputs: [] },
    { type: "error", name: "MessageDestinationSameChain", inputs: [] },
    { type: "error", name: "MessageTargetCrossL2Inbox", inputs: [] },
    { type: "error", name: "MessageTargetL2ToL2CrossDomainMessenger", inputs: [] },
    { type: "error", name: "NotEntered", inputs: [] },
    { type: "error", name: "ReentrantCall", inputs: [] },
    { type: "error", name: "TargetCallFailed", inputs: [] },
    { type: "error", name: "InvalidCrossDomainSender", inputs: [] },
    { type: "error", name: "InvalidERC7802", inputs: [] },
    { type: "error", name: "ZeroAddress", inputs: [] },
    { type: "error", name: "AllowanceOverflow", inputs: [] },
    { type: "error", name: "AllowanceUnderflow", inputs: [] },
    { type: "error", name: "InsufficientAllowance", inputs: [] },
    { type: "error", name: "InvalidPermit", inputs: [] },
    { type: "error", name: "Permit2AllowanceIsFixedAtInfinity", inputs: [] },
    { type: "error", name: "PermitExpired", inputs: [] },
    { type: "error", name: "TotalSupplyOverflow", inputs: [] },
    { type: "error", name: "TransferFailed", inputs: [] },
    { type: "error", name: "EnableNotApproved", inputs: [] },
    { type: "error", name: "ExecutionReverted", inputs: [] },
    { type: "error", name: "InitConfigError", inputs: [{ name: "idx", type: "uint256", internalType: "uint256" }] },
    { type: "error", name: "InvalidCallType", inputs: [] },
    { type: "error", name: "InvalidExecutor", inputs: [] },
    { type: "error", name: "InvalidFallback", inputs: [] },
    { type: "error", name: "InvalidMode", inputs: [] },
    { type: "error", name: "InvalidModuleType", inputs: [] },
    { type: "error", name: "InvalidNonce", inputs: [] },
    { type: "error", name: "InvalidSelector", inputs: [] },
    { type: "error", name: "InvalidValidationType", inputs: [] },
    { type: "error", name: "InvalidValidator", inputs: [] },
    { type: "error", name: "NonceInvalidationError", inputs: [] },
    { type: "error", name: "NotSupportedCallType", inputs: [] },
    { type: "error", name: "OnlyExecuteUserOp", inputs: [] },
    { type: "error", name: "PermissionDataLengthMismatch", inputs: [] },
    { type: "error", name: "PermissionNotAlllowedForSignature", inputs: [] },
    { type: "error", name: "PermissionNotAlllowedForUserOp", inputs: [] },
    { type: "error", name: "PolicyDataTooLarge", inputs: [] },
    { type: "error", name: "PolicyFailed", inputs: [{ name: "i", type: "uint256", internalType: "uint256" }] },
    { type: "error", name: "PolicySignatureOrderError", inputs: [] },
    { type: "error", name: "RootValidatorCannotBeRemoved", inputs: [] },
    { type: "error", name: "SignerPrefixNotPresent", inputs: [] },
    { type: "error", name: "InitializeError", inputs: [] },
    {
        type: "error",
        name: "AlreadyInitialized",
        inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "InvalidTargetAddress",
        inputs: [{ name: "target", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "NotInitialized",
        inputs: [{ name: "smartAccount", type: "address", internalType: "address" }],
    },
    { type: "error", name: "InvalidNonce", inputs: [{ name: "nonce", type: "uint256", internalType: "uint256" }] },
    { type: "error", name: "InvalidOwner", inputs: [{ name: "owner", type: "address", internalType: "address" }] },
    { type: "error", name: "LinkedList_AlreadyInitialized", inputs: [] },
    {
        type: "error",
        name: "LinkedList_EntryAlreadyInList",
        inputs: [{ name: "entry", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "LinkedList_InvalidEntry",
        inputs: [{ name: "entry", type: "address", internalType: "address" }],
    },
    { type: "error", name: "LinkedList_InvalidPage", inputs: [] },
    { type: "error", name: "UnauthorizedAccess", inputs: [] },
    {
        type: "error",
        name: "DelegateAndRevert",
        inputs: [
            { name: "success", type: "bool", internalType: "bool" },
            { name: "ret", type: "bytes", internalType: "bytes" },
        ],
    },
    {
        type: "error",
        name: "FailedOp",
        inputs: [
            { name: "opIndex", type: "uint256", internalType: "uint256" },
            { name: "reason", type: "string", internalType: "string" },
        ],
    },
    {
        type: "error",
        name: "FailedOpWithRevert",
        inputs: [
            { name: "opIndex", type: "uint256", internalType: "uint256" },
            { name: "reason", type: "string", internalType: "string" },
            { name: "inner", type: "bytes", internalType: "bytes" },
        ],
    },
    { type: "error", name: "PostOpReverted", inputs: [{ name: "returnData", type: "bytes", internalType: "bytes" }] },
    {
        type: "error",
        name: "SenderAddressResult",
        inputs: [{ name: "sender", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "SignatureValidationFailed",
        inputs: [{ name: "aggregator", type: "address", internalType: "address" }],
    },
    { type: "error", name: "ReentrancyGuardReentrantCall", inputs: [] },
    {
        type: "error",
        name: "OwnableInvalidOwner",
        inputs: [{ name: "owner", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "OwnableUnauthorizedAccount",
        inputs: [{ name: "account", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "BalanceNotReimbursed",
        inputs: [
            { name: "sender", type: "address", internalType: "address" },
            { name: "nonce", type: "uint256", internalType: "uint256" },
            { name: "reimbursed", type: "uint256", internalType: "uint256" },
            { name: "actualGasCost", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "RefundFailed",
        inputs: [
            { name: "sender", type: "address", internalType: "address" },
            { name: "nonce", type: "uint256", internalType: "uint256" },
            { name: "surplus", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "AmountTooLarge",
        inputs: [
            { name: "amount", type: "uint256", internalType: "uint256" },
            { name: "max", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "ERC20InsufficientAllowance",
        inputs: [
            { name: "spender", type: "address", internalType: "address" },
            { name: "allowance", type: "uint256", internalType: "uint256" },
            { name: "needed", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "ERC20InsufficientBalance",
        inputs: [
            { name: "sender", type: "address", internalType: "address" },
            { name: "balance", type: "uint256", internalType: "uint256" },
            { name: "needed", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "ERC20InvalidApprover",
        inputs: [{ name: "approver", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "ERC20InvalidReceiver",
        inputs: [{ name: "receiver", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "ERC20InvalidSender",
        inputs: [{ name: "sender", type: "address", internalType: "address" }],
    },
    {
        type: "error",
        name: "ERC20InvalidSpender",
        inputs: [{ name: "spender", type: "address", internalType: "address" }],
    },
    { type: "error", name: "EmptyBasket", inputs: [] },
    { type: "error", name: "FailedCall", inputs: [] },
    {
        type: "error",
        name: "IncorrectETH",
        inputs: [
            { name: "actual", type: "uint256", internalType: "uint256" },
            { name: "expected", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "InsufficientBalance",
        inputs: [
            { name: "balance", type: "uint256", internalType: "uint256" },
            { name: "needed", type: "uint256", internalType: "uint256" },
        ],
    },
    {
        type: "error",
        name: "SafeERC20FailedOperation",
        inputs: [{ name: "token", type: "address", internalType: "address" }],
    },
    { type: "error", name: "UnsortedDuplicate", inputs: [{ name: "token", type: "address", internalType: "address" }] },
    { type: "error", name: "ZeroAmount", inputs: [] },
    { type: "error", name: "ZeroUnits", inputs: [] },
    { type: "error", name: "AddressEmptyCode", inputs: [{ name: "target", type: "address", internalType: "address" }] },
    { type: "error", name: "CallSelectorApprove", inputs: [] },
    { type: "error", name: "InvalidLocalDecimals", inputs: [] },
    {
        type: "error",
        name: "SlippageExceeded",
        inputs: [
            { name: "amountToCreditLD", type: "uint256", internalType: "uint256" },
            { name: "minAmountToCreditLD", type: "uint256", internalType: "uint256" },
        ],
    },
] as const;
